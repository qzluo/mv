# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_genicam', [dirname(__file__)])
        except ImportError:
            import _genicam
            return _genicam
        if fp is not None:
            try:
                _mod = imp.load_module('_genicam', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _genicam = swig_import_helper()
    del swig_import_helper
else:
    import _genicam
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _genicam.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _genicam.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _genicam.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _genicam.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _genicam.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _genicam.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _genicam.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _genicam.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _genicam.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _genicam.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _genicam.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _genicam.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _genicam.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _genicam.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _genicam.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _genicam.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _genicam.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _genicam.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _genicam.ios_base_erase_event
    imbue_event = _genicam.ios_base_imbue_event
    copyfmt_event = _genicam.ios_base_copyfmt_event

    def register_callback(self, __fn: 'std::ios_base::event_callback', __index: 'int') -> "void":
        return _genicam.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args) -> "std::ios_base::fmtflags":
        return _genicam.ios_base_flags(self, *args)

    def setf(self, *args) -> "std::ios_base::fmtflags":
        return _genicam.ios_base_setf(self, *args)

    def unsetf(self, __mask: 'std::ios_base::fmtflags') -> "void":
        return _genicam.ios_base_unsetf(self, __mask)

    def precision(self, *args) -> "std::streamsize":
        return _genicam.ios_base_precision(self, *args)

    def width(self, *args) -> "std::streamsize":
        return _genicam.ios_base_width(self, *args)
    __swig_getmethods__["sync_with_stdio"] = lambda x: _genicam.ios_base_sync_with_stdio
    if _newclass:
        sync_with_stdio = staticmethod(_genicam.ios_base_sync_with_stdio)

    def imbue(self, __loc: 'std::locale const &') -> "std::locale":
        return _genicam.ios_base_imbue(self, __loc)

    def getloc(self) -> "std::locale":
        return _genicam.ios_base_getloc(self)
    __swig_getmethods__["xalloc"] = lambda x: _genicam.ios_base_xalloc
    if _newclass:
        xalloc = staticmethod(_genicam.ios_base_xalloc)

    def iword(self, __ix: 'int') -> "long &":
        return _genicam.ios_base_iword(self, __ix)

    def pword(self, __ix: 'int') -> "void *&":
        return _genicam.ios_base_pword(self, __ix)
    __swig_destroy__ = _genicam.delete_ios_base
    __del__ = lambda self: None
ios_base_swigregister = _genicam.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _genicam.cvar
ios_base.boolalpha = _genicam.cvar.ios_base_boolalpha
ios_base.dec = _genicam.cvar.ios_base_dec
ios_base.fixed = _genicam.cvar.ios_base_fixed
ios_base.hex = _genicam.cvar.ios_base_hex
ios_base.internal = _genicam.cvar.ios_base_internal
ios_base.left = _genicam.cvar.ios_base_left
ios_base.oct = _genicam.cvar.ios_base_oct
ios_base.right = _genicam.cvar.ios_base_right
ios_base.scientific = _genicam.cvar.ios_base_scientific
ios_base.showbase = _genicam.cvar.ios_base_showbase
ios_base.showpoint = _genicam.cvar.ios_base_showpoint
ios_base.showpos = _genicam.cvar.ios_base_showpos
ios_base.skipws = _genicam.cvar.ios_base_skipws
ios_base.unitbuf = _genicam.cvar.ios_base_unitbuf
ios_base.uppercase = _genicam.cvar.ios_base_uppercase
ios_base.adjustfield = _genicam.cvar.ios_base_adjustfield
ios_base.basefield = _genicam.cvar.ios_base_basefield
ios_base.floatfield = _genicam.cvar.ios_base_floatfield
ios_base.badbit = _genicam.cvar.ios_base_badbit
ios_base.eofbit = _genicam.cvar.ios_base_eofbit
ios_base.failbit = _genicam.cvar.ios_base_failbit
ios_base.goodbit = _genicam.cvar.ios_base_goodbit
ios_base.app = _genicam.cvar.ios_base_app
ios_base.ate = _genicam.cvar.ios_base_ate
ios_base.binary = _genicam.cvar.ios_base_binary
ios_base.ios_base_in = _genicam.cvar.ios_base_ios_base_in
ios_base.out = _genicam.cvar.ios_base_out
ios_base.trunc = _genicam.cvar.ios_base_trunc
ios_base.beg = _genicam.cvar.ios_base_beg
ios_base.cur = _genicam.cvar.ios_base_cur
ios_base.end = _genicam.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync: 'bool'=True) -> "bool":
    return _genicam.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _genicam.ios_base_sync_with_stdio

def ios_base_xalloc() -> "int":
    return _genicam.ios_base_xalloc()
ios_base_xalloc = _genicam.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr

    def rdstate(self) -> "std::ios_base::iostate":
        return _genicam.ios_rdstate(self)

    def clear(self, *args) -> "void":
        return _genicam.ios_clear(self, *args)

    def setstate(self, __state: 'std::ios_base::iostate') -> "void":
        return _genicam.ios_setstate(self, __state)

    def good(self) -> "bool":
        return _genicam.ios_good(self)

    def eof(self) -> "bool":
        return _genicam.ios_eof(self)

    def fail(self) -> "bool":
        return _genicam.ios_fail(self)

    def bad(self) -> "bool":
        return _genicam.ios_bad(self)

    def exceptions(self, *args) -> "void":
        return _genicam.ios_exceptions(self, *args)

    def __init__(self, __sb: 'std::basic_streambuf< char,std::char_traits< char > > *'):
        this = _genicam.new_ios(__sb)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_ios
    __del__ = lambda self: None

    def tie(self, *args) -> "std::basic_ostream< char,std::char_traits< char > > *":
        return _genicam.ios_tie(self, *args)

    def rdbuf(self, *args) -> "std::basic_streambuf< char,std::char_traits< char > > *":
        return _genicam.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs: 'ios') -> "std::basic_ios< char > &":
        return _genicam.ios_copyfmt(self, __rhs)

    def fill(self, *args) -> "std::basic_ios< char >::char_type":
        return _genicam.ios_fill(self, *args)

    def imbue(self, __loc: 'std::locale const &') -> "std::locale":
        return _genicam.ios_imbue(self, __loc)

    def narrow(self, __c: 'std::basic_ios< char >::char_type', __dfault: 'char') -> "char":
        return _genicam.ios_narrow(self, __c, __dfault)

    def widen(self, __c: 'char') -> "std::basic_ios< char >::char_type":
        return _genicam.ios_widen(self, __c)
ios_swigregister = _genicam.ios_swigregister
ios_swigregister(ios)

class GenericException(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenericException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _genicam.new_GenericException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def GetDescription(self) -> "char const *":
        return _genicam.GenericException_GetDescription(self)


    def __str__(self): return self.GetDescription()



    def GetSourceFileName(self) -> "char const *":
        return _genicam.GenericException_GetSourceFileName(self)

    def GetSourceLine(self) -> "unsigned int":
        return _genicam.GenericException_GetSourceLine(self)

    def what(self) -> "char const *":
        return _genicam.GenericException_what(self)
    __swig_destroy__ = _genicam.delete_GenericException
    __del__ = lambda self: None
GenericException_swigregister = _genicam.GenericException_swigregister
GenericException_swigregister(GenericException)

class InvalidArgumentException(GenericException):
    __swig_setmethods__ = {}
    for _s in [GenericException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidArgumentException, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidArgumentException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _genicam.new_InvalidArgumentException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_InvalidArgumentException
    __del__ = lambda self: None
InvalidArgumentException_swigregister = _genicam.InvalidArgumentException_swigregister
InvalidArgumentException_swigregister(InvalidArgumentException)

class OutOfRangeException(GenericException):
    __swig_setmethods__ = {}
    for _s in [GenericException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutOfRangeException, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutOfRangeException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _genicam.new_OutOfRangeException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_OutOfRangeException
    __del__ = lambda self: None
OutOfRangeException_swigregister = _genicam.OutOfRangeException_swigregister
OutOfRangeException_swigregister(OutOfRangeException)

class PropertyException(GenericException):
    __swig_setmethods__ = {}
    for _s in [GenericException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyException, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _genicam.new_PropertyException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_PropertyException
    __del__ = lambda self: None
PropertyException_swigregister = _genicam.PropertyException_swigregister
PropertyException_swigregister(PropertyException)

class RuntimeException(GenericException):
    __swig_setmethods__ = {}
    for _s in [GenericException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RuntimeException, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RuntimeException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _genicam.new_RuntimeException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_RuntimeException
    __del__ = lambda self: None
RuntimeException_swigregister = _genicam.RuntimeException_swigregister
RuntimeException_swigregister(RuntimeException)

class LogicalErrorException(GenericException):
    __swig_setmethods__ = {}
    for _s in [GenericException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogicalErrorException, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogicalErrorException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _genicam.new_LogicalErrorException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_LogicalErrorException
    __del__ = lambda self: None
LogicalErrorException_swigregister = _genicam.LogicalErrorException_swigregister
LogicalErrorException_swigregister(LogicalErrorException)

class AccessException(GenericException):
    __swig_setmethods__ = {}
    for _s in [GenericException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccessException, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccessException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _genicam.new_AccessException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_AccessException
    __del__ = lambda self: None
AccessException_swigregister = _genicam.AccessException_swigregister
AccessException_swigregister(AccessException)

class TimeoutException(GenericException):
    __swig_setmethods__ = {}
    for _s in [GenericException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeoutException, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeoutException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _genicam.new_TimeoutException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_TimeoutException
    __del__ = lambda self: None
TimeoutException_swigregister = _genicam.TimeoutException_swigregister
TimeoutException_swigregister(TimeoutException)

class DynamicCastException(GenericException):
    __swig_setmethods__ = {}
    for _s in [GenericException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicCastException, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicCastException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _genicam.new_DynamicCastException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_DynamicCastException
    __del__ = lambda self: None
DynamicCastException_swigregister = _genicam.DynamicCastException_swigregister
DynamicCastException_swigregister(DynamicCastException)


_genicam.Signed_swigconstant(_genicam)
Signed = _genicam.Signed

_genicam.Unsigned_swigconstant(_genicam)
Unsigned = _genicam.Unsigned

_genicam._UndefinedSign_swigconstant(_genicam)
_UndefinedSign = _genicam._UndefinedSign

_genicam.NI_swigconstant(_genicam)
NI = _genicam.NI

_genicam.NA_swigconstant(_genicam)
NA = _genicam.NA

_genicam.WO_swigconstant(_genicam)
WO = _genicam.WO

_genicam.RO_swigconstant(_genicam)
RO = _genicam.RO

_genicam.RW_swigconstant(_genicam)
RW = _genicam.RW

_genicam._UndefinedAccesMode_swigconstant(_genicam)
_UndefinedAccesMode = _genicam._UndefinedAccesMode

_genicam._CycleDetectAccesMode_swigconstant(_genicam)
_CycleDetectAccesMode = _genicam._CycleDetectAccesMode

_genicam.Beginner_swigconstant(_genicam)
Beginner = _genicam.Beginner

_genicam.Expert_swigconstant(_genicam)
Expert = _genicam.Expert

_genicam.Guru_swigconstant(_genicam)
Guru = _genicam.Guru

_genicam.Invisible_swigconstant(_genicam)
Invisible = _genicam.Invisible

_genicam._UndefinedVisibility_swigconstant(_genicam)
_UndefinedVisibility = _genicam._UndefinedVisibility

_genicam.NoCache_swigconstant(_genicam)
NoCache = _genicam.NoCache

_genicam.WriteThrough_swigconstant(_genicam)
WriteThrough = _genicam.WriteThrough

_genicam.WriteAround_swigconstant(_genicam)
WriteAround = _genicam.WriteAround

_genicam._UndefinedCachingMode_swigconstant(_genicam)
_UndefinedCachingMode = _genicam._UndefinedCachingMode

_genicam.Linear_swigconstant(_genicam)
Linear = _genicam.Linear

_genicam.Logarithmic_swigconstant(_genicam)
Logarithmic = _genicam.Logarithmic

_genicam.Boolean_swigconstant(_genicam)
Boolean = _genicam.Boolean

_genicam.PureNumber_swigconstant(_genicam)
PureNumber = _genicam.PureNumber

_genicam.HexNumber_swigconstant(_genicam)
HexNumber = _genicam.HexNumber

_genicam.IPV4Address_swigconstant(_genicam)
IPV4Address = _genicam.IPV4Address

_genicam.MACAddress_swigconstant(_genicam)
MACAddress = _genicam.MACAddress

_genicam._UndefinedRepresentation_swigconstant(_genicam)
_UndefinedRepresentation = _genicam._UndefinedRepresentation

_genicam.BigEndian_swigconstant(_genicam)
BigEndian = _genicam.BigEndian

_genicam.LittleEndian_swigconstant(_genicam)
LittleEndian = _genicam.LittleEndian

_genicam._UndefinedEndian_swigconstant(_genicam)
_UndefinedEndian = _genicam._UndefinedEndian

_genicam.Custom_swigconstant(_genicam)
Custom = _genicam.Custom

_genicam.Standard_swigconstant(_genicam)
Standard = _genicam.Standard

_genicam._UndefinedNameSpace_swigconstant(_genicam)
_UndefinedNameSpace = _genicam._UndefinedNameSpace

_genicam._None_swigconstant(_genicam)
_None = _genicam._None

_genicam.GEV_swigconstant(_genicam)
GEV = _genicam.GEV

_genicam.IIDC_swigconstant(_genicam)
IIDC = _genicam.IIDC

_genicam.CL_swigconstant(_genicam)
CL = _genicam.CL

_genicam.USB_swigconstant(_genicam)
USB = _genicam.USB

_genicam._UndefinedStandardNameSpace_swigconstant(_genicam)
_UndefinedStandardNameSpace = _genicam._UndefinedStandardNameSpace

_genicam.Yes_swigconstant(_genicam)
Yes = _genicam.Yes

_genicam.No_swigconstant(_genicam)
No = _genicam.No

_genicam._UndefinedYesNo_swigconstant(_genicam)
_UndefinedYesNo = _genicam._UndefinedYesNo

_genicam.Increasing_swigconstant(_genicam)
Increasing = _genicam.Increasing

_genicam.Decreasing_swigconstant(_genicam)
Decreasing = _genicam.Decreasing

_genicam.Varying_swigconstant(_genicam)
Varying = _genicam.Varying

_genicam.Automatic_swigconstant(_genicam)
Automatic = _genicam.Automatic

_genicam._UndefinedESlope_swigconstant(_genicam)
_UndefinedESlope = _genicam._UndefinedESlope

_genicam.xvLoad_swigconstant(_genicam)
xvLoad = _genicam.xvLoad

_genicam.xvCycles_swigconstant(_genicam)
xvCycles = _genicam.xvCycles

_genicam.xvSFNC_swigconstant(_genicam)
xvSFNC = _genicam.xvSFNC

_genicam.xvDefault_swigconstant(_genicam)
xvDefault = _genicam.xvDefault

_genicam.xvAll_swigconstant(_genicam)
xvAll = _genicam.xvAll

_genicam._UndefinedEXMLValidation_swigconstant(_genicam)
_UndefinedEXMLValidation = _genicam._UndefinedEXMLValidation

_genicam.fnAutomatic_swigconstant(_genicam)
fnAutomatic = _genicam.fnAutomatic

_genicam.fnFixed_swigconstant(_genicam)
fnFixed = _genicam.fnFixed

_genicam.fnScientific_swigconstant(_genicam)
fnScientific = _genicam.fnScientific

_genicam._UndefinedEDisplayNotation_swigconstant(_genicam)
_UndefinedEDisplayNotation = _genicam._UndefinedEDisplayNotation

_genicam.intfIValue_swigconstant(_genicam)
intfIValue = _genicam.intfIValue

_genicam.intfIBase_swigconstant(_genicam)
intfIBase = _genicam.intfIBase

_genicam.intfIInteger_swigconstant(_genicam)
intfIInteger = _genicam.intfIInteger

_genicam.intfIBoolean_swigconstant(_genicam)
intfIBoolean = _genicam.intfIBoolean

_genicam.intfICommand_swigconstant(_genicam)
intfICommand = _genicam.intfICommand

_genicam.intfIFloat_swigconstant(_genicam)
intfIFloat = _genicam.intfIFloat

_genicam.intfIString_swigconstant(_genicam)
intfIString = _genicam.intfIString

_genicam.intfIRegister_swigconstant(_genicam)
intfIRegister = _genicam.intfIRegister

_genicam.intfICategory_swigconstant(_genicam)
intfICategory = _genicam.intfICategory

_genicam.intfIEnumeration_swigconstant(_genicam)
intfIEnumeration = _genicam.intfIEnumeration

_genicam.intfIEnumEntry_swigconstant(_genicam)
intfIEnumEntry = _genicam.intfIEnumEntry

_genicam.intfIPort_swigconstant(_genicam)
intfIPort = _genicam.intfIPort

_genicam.ctParentNodes_swigconstant(_genicam)
ctParentNodes = _genicam.ctParentNodes

_genicam.ctReadingChildren_swigconstant(_genicam)
ctReadingChildren = _genicam.ctReadingChildren

_genicam.ctWritingChildren_swigconstant(_genicam)
ctWritingChildren = _genicam.ctWritingChildren

_genicam.ctInvalidatingChildren_swigconstant(_genicam)
ctInvalidatingChildren = _genicam.ctInvalidatingChildren

_genicam.ctDependingNodes_swigconstant(_genicam)
ctDependingNodes = _genicam.ctDependingNodes

_genicam.ctTerminalNodes_swigconstant(_genicam)
ctTerminalNodes = _genicam.ctTerminalNodes

_genicam.noIncrement_swigconstant(_genicam)
noIncrement = _genicam.noIncrement

_genicam.fixedIncrement_swigconstant(_genicam)
fixedIncrement = _genicam.fixedIncrement

_genicam.listIncrement_swigconstant(_genicam)
listIncrement = _genicam.listIncrement

_genicam.idFrom_swigconstant(_genicam)
idFrom = _genicam.idFrom

_genicam.idTo_swigconstant(_genicam)
idTo = _genicam.idTo

_genicam.idNone_swigconstant(_genicam)
idNone = _genicam.idNone
class ESignClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ESignClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ESignClass, name)
    __repr__ = _swig_repr
    __swig_getmethods__["FromString"] = lambda x: _genicam.ESignClass_FromString
    if _newclass:
        FromString = staticmethod(_genicam.ESignClass_FromString)
    __swig_getmethods__["ToString"] = lambda x: _genicam.ESignClass_ToString
    if _newclass:
        ToString = staticmethod(_genicam.ESignClass_ToString)

    def __init__(self):
        this = _genicam.new_ESignClass()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_ESignClass
    __del__ = lambda self: None
ESignClass_swigregister = _genicam.ESignClass_swigregister
ESignClass_swigregister(ESignClass)

def ESignClass_FromString(ValueStr: 'GENICAM_NAMESPACE::gcstring const &', pValue: 'GENAPI_NAMESPACE::ESign *') -> "GENICAM_NAMESPACE::gcstring const &":
    return _genicam.ESignClass_FromString(ValueStr, pValue)
ESignClass_FromString = _genicam.ESignClass_FromString

def ESignClass_ToString(*args) -> "GENICAM_NAMESPACE::gcstring":
    return _genicam.ESignClass_ToString(*args)
ESignClass_ToString = _genicam.ESignClass_ToString

class EEndianessClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EEndianessClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EEndianessClass, name)
    __repr__ = _swig_repr
    __swig_getmethods__["FromString"] = lambda x: _genicam.EEndianessClass_FromString
    if _newclass:
        FromString = staticmethod(_genicam.EEndianessClass_FromString)
    __swig_getmethods__["ToString"] = lambda x: _genicam.EEndianessClass_ToString
    if _newclass:
        ToString = staticmethod(_genicam.EEndianessClass_ToString)

    def __init__(self):
        this = _genicam.new_EEndianessClass()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_EEndianessClass
    __del__ = lambda self: None
EEndianessClass_swigregister = _genicam.EEndianessClass_swigregister
EEndianessClass_swigregister(EEndianessClass)

def EEndianessClass_FromString(ValueStr: 'GENICAM_NAMESPACE::gcstring const &', pValue: 'GENAPI_NAMESPACE::EEndianess *') -> "GENICAM_NAMESPACE::gcstring const &":
    return _genicam.EEndianessClass_FromString(ValueStr, pValue)
EEndianessClass_FromString = _genicam.EEndianessClass_FromString

def EEndianessClass_ToString(*args) -> "GENICAM_NAMESPACE::gcstring":
    return _genicam.EEndianessClass_ToString(*args)
EEndianessClass_ToString = _genicam.EEndianessClass_ToString

class ERepresentationClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ERepresentationClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ERepresentationClass, name)
    __repr__ = _swig_repr
    __swig_getmethods__["FromString"] = lambda x: _genicam.ERepresentationClass_FromString
    if _newclass:
        FromString = staticmethod(_genicam.ERepresentationClass_FromString)
    __swig_getmethods__["ToString"] = lambda x: _genicam.ERepresentationClass_ToString
    if _newclass:
        ToString = staticmethod(_genicam.ERepresentationClass_ToString)

    def __init__(self):
        this = _genicam.new_ERepresentationClass()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_ERepresentationClass
    __del__ = lambda self: None
ERepresentationClass_swigregister = _genicam.ERepresentationClass_swigregister
ERepresentationClass_swigregister(ERepresentationClass)

def ERepresentationClass_FromString(ValueStr: 'GENICAM_NAMESPACE::gcstring const &', pValue: 'GENAPI_NAMESPACE::ERepresentation *') -> "GENICAM_NAMESPACE::gcstring const &":
    return _genicam.ERepresentationClass_FromString(ValueStr, pValue)
ERepresentationClass_FromString = _genicam.ERepresentationClass_FromString

def ERepresentationClass_ToString(*args) -> "GENICAM_NAMESPACE::gcstring":
    return _genicam.ERepresentationClass_ToString(*args)
ERepresentationClass_ToString = _genicam.ERepresentationClass_ToString

class EVisibilityClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EVisibilityClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EVisibilityClass, name)
    __repr__ = _swig_repr
    __swig_getmethods__["FromString"] = lambda x: _genicam.EVisibilityClass_FromString
    if _newclass:
        FromString = staticmethod(_genicam.EVisibilityClass_FromString)
    __swig_getmethods__["ToString"] = lambda x: _genicam.EVisibilityClass_ToString
    if _newclass:
        ToString = staticmethod(_genicam.EVisibilityClass_ToString)

    def __init__(self):
        this = _genicam.new_EVisibilityClass()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_EVisibilityClass
    __del__ = lambda self: None
EVisibilityClass_swigregister = _genicam.EVisibilityClass_swigregister
EVisibilityClass_swigregister(EVisibilityClass)

def EVisibilityClass_FromString(ValueStr: 'GENICAM_NAMESPACE::gcstring const &', pValue: 'GENAPI_NAMESPACE::EVisibility *') -> "GENICAM_NAMESPACE::gcstring const &":
    return _genicam.EVisibilityClass_FromString(ValueStr, pValue)
EVisibilityClass_FromString = _genicam.EVisibilityClass_FromString

def EVisibilityClass_ToString(*args) -> "GENICAM_NAMESPACE::gcstring":
    return _genicam.EVisibilityClass_ToString(*args)
EVisibilityClass_ToString = _genicam.EVisibilityClass_ToString

class EAccessModeClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EAccessModeClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EAccessModeClass, name)
    __repr__ = _swig_repr
    __swig_getmethods__["FromString"] = lambda x: _genicam.EAccessModeClass_FromString
    if _newclass:
        FromString = staticmethod(_genicam.EAccessModeClass_FromString)
    __swig_getmethods__["ToString"] = lambda x: _genicam.EAccessModeClass_ToString
    if _newclass:
        ToString = staticmethod(_genicam.EAccessModeClass_ToString)

    def __init__(self):
        this = _genicam.new_EAccessModeClass()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_EAccessModeClass
    __del__ = lambda self: None
EAccessModeClass_swigregister = _genicam.EAccessModeClass_swigregister
EAccessModeClass_swigregister(EAccessModeClass)

def EAccessModeClass_FromString(ValueStr: 'GENICAM_NAMESPACE::gcstring const &', pValue: 'GENAPI_NAMESPACE::EAccessMode *') -> "GENICAM_NAMESPACE::gcstring const &":
    return _genicam.EAccessModeClass_FromString(ValueStr, pValue)
EAccessModeClass_FromString = _genicam.EAccessModeClass_FromString

def EAccessModeClass_ToString(*args) -> "GENICAM_NAMESPACE::gcstring":
    return _genicam.EAccessModeClass_ToString(*args)
EAccessModeClass_ToString = _genicam.EAccessModeClass_ToString

class ECachingModeClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ECachingModeClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ECachingModeClass, name)
    __repr__ = _swig_repr
    __swig_getmethods__["FromString"] = lambda x: _genicam.ECachingModeClass_FromString
    if _newclass:
        FromString = staticmethod(_genicam.ECachingModeClass_FromString)
    __swig_getmethods__["ToString"] = lambda x: _genicam.ECachingModeClass_ToString
    if _newclass:
        ToString = staticmethod(_genicam.ECachingModeClass_ToString)

    def __init__(self):
        this = _genicam.new_ECachingModeClass()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_ECachingModeClass
    __del__ = lambda self: None
ECachingModeClass_swigregister = _genicam.ECachingModeClass_swigregister
ECachingModeClass_swigregister(ECachingModeClass)

def ECachingModeClass_FromString(ValueStr: 'GENICAM_NAMESPACE::gcstring const &', pValue: 'GENAPI_NAMESPACE::ECachingMode *') -> "GENICAM_NAMESPACE::gcstring const &":
    return _genicam.ECachingModeClass_FromString(ValueStr, pValue)
ECachingModeClass_FromString = _genicam.ECachingModeClass_FromString

def ECachingModeClass_ToString(*args) -> "GENICAM_NAMESPACE::gcstring":
    return _genicam.ECachingModeClass_ToString(*args)
ECachingModeClass_ToString = _genicam.ECachingModeClass_ToString

class ENameSpaceClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ENameSpaceClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ENameSpaceClass, name)
    __repr__ = _swig_repr
    __swig_getmethods__["FromString"] = lambda x: _genicam.ENameSpaceClass_FromString
    if _newclass:
        FromString = staticmethod(_genicam.ENameSpaceClass_FromString)
    __swig_getmethods__["ToString"] = lambda x: _genicam.ENameSpaceClass_ToString
    if _newclass:
        ToString = staticmethod(_genicam.ENameSpaceClass_ToString)

    def __init__(self):
        this = _genicam.new_ENameSpaceClass()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_ENameSpaceClass
    __del__ = lambda self: None
ENameSpaceClass_swigregister = _genicam.ENameSpaceClass_swigregister
ENameSpaceClass_swigregister(ENameSpaceClass)

def ENameSpaceClass_FromString(ValueStr: 'GENICAM_NAMESPACE::gcstring const &', pValue: 'GENAPI_NAMESPACE::ENameSpace *') -> "GENICAM_NAMESPACE::gcstring const &":
    return _genicam.ENameSpaceClass_FromString(ValueStr, pValue)
ENameSpaceClass_FromString = _genicam.ENameSpaceClass_FromString

def ENameSpaceClass_ToString(*args) -> "GENICAM_NAMESPACE::gcstring":
    return _genicam.ENameSpaceClass_ToString(*args)
ENameSpaceClass_ToString = _genicam.ENameSpaceClass_ToString

class EYesNoClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EYesNoClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EYesNoClass, name)
    __repr__ = _swig_repr
    __swig_getmethods__["FromString"] = lambda x: _genicam.EYesNoClass_FromString
    if _newclass:
        FromString = staticmethod(_genicam.EYesNoClass_FromString)
    __swig_getmethods__["ToString"] = lambda x: _genicam.EYesNoClass_ToString
    if _newclass:
        ToString = staticmethod(_genicam.EYesNoClass_ToString)

    def __init__(self):
        this = _genicam.new_EYesNoClass()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_EYesNoClass
    __del__ = lambda self: None
EYesNoClass_swigregister = _genicam.EYesNoClass_swigregister
EYesNoClass_swigregister(EYesNoClass)

def EYesNoClass_FromString(ValueStr: 'GENICAM_NAMESPACE::gcstring const &', pValue: 'GENAPI_NAMESPACE::EYesNo *') -> "GENICAM_NAMESPACE::gcstring const &":
    return _genicam.EYesNoClass_FromString(ValueStr, pValue)
EYesNoClass_FromString = _genicam.EYesNoClass_FromString

def EYesNoClass_ToString(*args) -> "GENICAM_NAMESPACE::gcstring":
    return _genicam.EYesNoClass_ToString(*args)
EYesNoClass_ToString = _genicam.EYesNoClass_ToString

class EStandardNameSpaceClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EStandardNameSpaceClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EStandardNameSpaceClass, name)
    __repr__ = _swig_repr
    __swig_getmethods__["FromString"] = lambda x: _genicam.EStandardNameSpaceClass_FromString
    if _newclass:
        FromString = staticmethod(_genicam.EStandardNameSpaceClass_FromString)
    __swig_getmethods__["ToString"] = lambda x: _genicam.EStandardNameSpaceClass_ToString
    if _newclass:
        ToString = staticmethod(_genicam.EStandardNameSpaceClass_ToString)

    def __init__(self):
        this = _genicam.new_EStandardNameSpaceClass()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_EStandardNameSpaceClass
    __del__ = lambda self: None
EStandardNameSpaceClass_swigregister = _genicam.EStandardNameSpaceClass_swigregister
EStandardNameSpaceClass_swigregister(EStandardNameSpaceClass)

def EStandardNameSpaceClass_FromString(ValueStr: 'GENICAM_NAMESPACE::gcstring const &', pValue: 'GENAPI_NAMESPACE::EStandardNameSpace *') -> "GENICAM_NAMESPACE::gcstring const &":
    return _genicam.EStandardNameSpaceClass_FromString(ValueStr, pValue)
EStandardNameSpaceClass_FromString = _genicam.EStandardNameSpaceClass_FromString

def EStandardNameSpaceClass_ToString(*args) -> "GENICAM_NAMESPACE::gcstring":
    return _genicam.EStandardNameSpaceClass_ToString(*args)
EStandardNameSpaceClass_ToString = _genicam.EStandardNameSpaceClass_ToString

class ESlopeClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ESlopeClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ESlopeClass, name)
    __repr__ = _swig_repr
    __swig_getmethods__["FromString"] = lambda x: _genicam.ESlopeClass_FromString
    if _newclass:
        FromString = staticmethod(_genicam.ESlopeClass_FromString)
    __swig_getmethods__["ToString"] = lambda x: _genicam.ESlopeClass_ToString
    if _newclass:
        ToString = staticmethod(_genicam.ESlopeClass_ToString)

    def __init__(self):
        this = _genicam.new_ESlopeClass()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_ESlopeClass
    __del__ = lambda self: None
ESlopeClass_swigregister = _genicam.ESlopeClass_swigregister
ESlopeClass_swigregister(ESlopeClass)

def ESlopeClass_FromString(ValueStr: 'GENICAM_NAMESPACE::gcstring const &', pValue: 'GENAPI_NAMESPACE::ESlope *') -> "GENICAM_NAMESPACE::gcstring const &":
    return _genicam.ESlopeClass_FromString(ValueStr, pValue)
ESlopeClass_FromString = _genicam.ESlopeClass_FromString

def ESlopeClass_ToString(*args) -> "GENICAM_NAMESPACE::gcstring":
    return _genicam.ESlopeClass_ToString(*args)
ESlopeClass_ToString = _genicam.ESlopeClass_ToString

class EDisplayNotationClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EDisplayNotationClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EDisplayNotationClass, name)
    __repr__ = _swig_repr
    __swig_getmethods__["FromString"] = lambda x: _genicam.EDisplayNotationClass_FromString
    if _newclass:
        FromString = staticmethod(_genicam.EDisplayNotationClass_FromString)
    __swig_getmethods__["ToString"] = lambda x: _genicam.EDisplayNotationClass_ToString
    if _newclass:
        ToString = staticmethod(_genicam.EDisplayNotationClass_ToString)

    def __init__(self):
        this = _genicam.new_EDisplayNotationClass()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_EDisplayNotationClass
    __del__ = lambda self: None
EDisplayNotationClass_swigregister = _genicam.EDisplayNotationClass_swigregister
EDisplayNotationClass_swigregister(EDisplayNotationClass)

def EDisplayNotationClass_FromString(ValueStr: 'GENICAM_NAMESPACE::gcstring const &', pValue: 'GENAPI_NAMESPACE::EDisplayNotation *') -> "GENICAM_NAMESPACE::gcstring const &":
    return _genicam.EDisplayNotationClass_FromString(ValueStr, pValue)
EDisplayNotationClass_FromString = _genicam.EDisplayNotationClass_FromString

def EDisplayNotationClass_ToString(*args) -> "GENICAM_NAMESPACE::gcstring":
    return _genicam.EDisplayNotationClass_ToString(*args)
EDisplayNotationClass_ToString = _genicam.EDisplayNotationClass_ToString

class EInputDirectionClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EInputDirectionClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EInputDirectionClass, name)
    __repr__ = _swig_repr
    __swig_getmethods__["FromString"] = lambda x: _genicam.EInputDirectionClass_FromString
    if _newclass:
        FromString = staticmethod(_genicam.EInputDirectionClass_FromString)
    __swig_getmethods__["ToString"] = lambda x: _genicam.EInputDirectionClass_ToString
    if _newclass:
        ToString = staticmethod(_genicam.EInputDirectionClass_ToString)

    def __init__(self):
        this = _genicam.new_EInputDirectionClass()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_EInputDirectionClass
    __del__ = lambda self: None
EInputDirectionClass_swigregister = _genicam.EInputDirectionClass_swigregister
EInputDirectionClass_swigregister(EInputDirectionClass)

def EInputDirectionClass_FromString(ValueStr: 'GENICAM_NAMESPACE::gcstring const &', pValue: 'GENAPI_NAMESPACE::EInputDirection *') -> "GENICAM_NAMESPACE::gcstring const &":
    return _genicam.EInputDirectionClass_FromString(ValueStr, pValue)
EInputDirectionClass_FromString = _genicam.EInputDirectionClass_FromString

def EInputDirectionClass_ToString(*args) -> "GENICAM_NAMESPACE::gcstring":
    return _genicam.EInputDirectionClass_ToString(*args)
EInputDirectionClass_ToString = _genicam.EInputDirectionClass_ToString

class Version(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Version, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Version, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Major"] = _genicam.Version_Major_set
    __swig_getmethods__["Major"] = _genicam.Version_Major_get
    if _newclass:
        Major = _swig_property(_genicam.Version_Major_get, _genicam.Version_Major_set)
    __swig_setmethods__["Minor"] = _genicam.Version_Minor_set
    __swig_getmethods__["Minor"] = _genicam.Version_Minor_get
    if _newclass:
        Minor = _swig_property(_genicam.Version_Minor_get, _genicam.Version_Minor_set)
    __swig_setmethods__["SubMinor"] = _genicam.Version_SubMinor_set
    __swig_getmethods__["SubMinor"] = _genicam.Version_SubMinor_get
    if _newclass:
        SubMinor = _swig_property(_genicam.Version_SubMinor_get, _genicam.Version_SubMinor_set)

    def __init__(self):
        this = _genicam.new_Version()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_Version
    __del__ = lambda self: None
Version_swigregister = _genicam.Version_swigregister
Version_swigregister(Version)

class IBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetAccessMode(self) -> "GENAPI_NAMESPACE::EAccessMode":
        return _genicam.IBase_GetAccessMode(self)
IBase_swigregister = _genicam.IBase_swigregister
IBase_swigregister(IBase)

class INode(IBase):
    __swig_setmethods__ = {}
    for _s in [IBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, INode, name, value)
    __swig_getmethods__ = {}
    for _s in [IBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, INode, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetName(self, FullQualified: 'bool'=False) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.INode_GetName(self, FullQualified)

    Name = property(GetName)


    def GetNameSpace(self) -> "GENAPI_NAMESPACE::ENameSpace":
        return _genicam.INode_GetNameSpace(self)

    NameSpace = property(GetNameSpace)


    def GetVisibility(self) -> "GENAPI_NAMESPACE::EVisibility":
        return _genicam.INode_GetVisibility(self)

    Visibility = property(GetVisibility)


    def InvalidateNode(self) -> "void":
        return _genicam.INode_InvalidateNode(self)

    def IsCachable(self) -> "bool":
        return _genicam.INode_IsCachable(self)

    def IsAccessModeCacheable(self) -> "GENAPI_NAMESPACE::EYesNo":
        return _genicam.INode_IsAccessModeCacheable(self)

    def GetCachingMode(self) -> "GENAPI_NAMESPACE::ECachingMode":
        return _genicam.INode_GetCachingMode(self)

    CachingMode = property(GetCachingMode)


    def GetPollingTime(self) -> "int64_t":
        return _genicam.INode_GetPollingTime(self)

    PollingTime = property(GetPollingTime)


    def GetToolTip(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.INode_GetToolTip(self)

    ToolTip = property(GetToolTip)


    def GetDescription(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.INode_GetDescription(self)

    Description = property(GetDescription)


    def GetDisplayName(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.INode_GetDisplayName(self)

    DisplayName = property(GetDisplayName)


    def GetDeviceName(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.INode_GetDeviceName(self)

    DeviceName = property(GetDeviceName)


    def GetChildren(self, *args) -> "void":
        return _genicam.INode_GetChildren(self, *args)

    Children = property(GetChildren)


    def GetParents(self) -> "void":
        return _genicam.INode_GetParents(self)

    Parents = property(GetParents)


    def RegisterCallback(self, INPUT: 'CNodeCallback *') -> "GENAPI_NAMESPACE::CallbackHandleType":
        return _genicam.INode_RegisterCallback(self, INPUT)

    def DeregisterCallback(self, hCallback: 'GENAPI_NAMESPACE::CallbackHandleType') -> "bool":
        return _genicam.INode_DeregisterCallback(self, hCallback)

    def GetNodeMap(self) -> "GENAPI_NAMESPACE::INodeMap *":
        return _genicam.INode_GetNodeMap(self)

    NodeMap = property(GetNodeMap)


    def GetEventID(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.INode_GetEventID(self)

    EventID = property(GetEventID)


    def IsStreamable(self) -> "bool":
        return _genicam.INode_IsStreamable(self)

    def GetPropertyNames(self) -> "void":
        return _genicam.INode_GetPropertyNames(self)

    PropertyNames = property(GetPropertyNames)


    def GetProperty(self, PropertyName: 'GENICAM_NAMESPACE::gcstring const &') -> "void":
        return _genicam.INode_GetProperty(self, PropertyName)

    def ImposeAccessMode(self, ImposedAccessMode: 'GENAPI_NAMESPACE::EAccessMode') -> "void":
        return _genicam.INode_ImposeAccessMode(self, ImposedAccessMode)

    def ImposeVisibility(self, ImposedVisibility: 'GENAPI_NAMESPACE::EVisibility') -> "void":
        return _genicam.INode_ImposeVisibility(self, ImposedVisibility)

    def GetAlias(self) -> "GENAPI_NAMESPACE::INode *":
        return _genicam.INode_GetAlias(self)

    Alias = property(GetAlias)


    def GetCastAlias(self) -> "GENAPI_NAMESPACE::INode *":
        return _genicam.INode_GetCastAlias(self)

    CastAlias = property(GetCastAlias)


    def GetDocuURL(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.INode_GetDocuURL(self)

    DocuURL = property(GetDocuURL)


    def IsDeprecated(self) -> "bool":
        return _genicam.INode_IsDeprecated(self)

    def GetPrincipalInterfaceType(self) -> "GENAPI_NAMESPACE::EInterfaceType":
        return _genicam.INode_GetPrincipalInterfaceType(self)

    PrincipalInterfaceType = property(GetPrincipalInterfaceType)


    def IsFeature(self) -> "bool":
        return _genicam.INode_IsFeature(self)

    def IsSelector(self) -> "bool":
        return _genicam.INode_IsSelector(self)

    def GetSelectedFeatures(self) -> "void":
        return _genicam.INode_GetSelectedFeatures(self)

    def GetSelectingFeatures(self) -> "void":
        return _genicam.INode_GetSelectingFeatures(self)
INode_swigregister = _genicam.INode_swigregister
INode_swigregister(INode)


def IsReadable(*args) -> "bool":
    return _genicam.IsReadable(*args)
IsReadable = _genicam.IsReadable

def IsWritable(*args) -> "bool":
    return _genicam.IsWritable(*args)
IsWritable = _genicam.IsWritable

def IsImplemented(*args) -> "bool":
    return _genicam.IsImplemented(*args)
IsImplemented = _genicam.IsImplemented

def IsAvailable(*args) -> "bool":
    return _genicam.IsAvailable(*args)
IsAvailable = _genicam.IsAvailable

def Combine(Peter: 'GENAPI_NAMESPACE::EAccessMode', Paul: 'GENAPI_NAMESPACE::EAccessMode') -> "GENAPI_NAMESPACE::EAccessMode":
    return _genicam.Combine(Peter, Paul)
Combine = _genicam.Combine

def IsVisible(Visibility: 'GENAPI_NAMESPACE::EVisibility', MaxVisiblity: 'GENAPI_NAMESPACE::EVisibility') -> "bool":
    return _genicam.IsVisible(Visibility, MaxVisiblity)
IsVisible = _genicam.IsVisible

def CombineVisibility(Peter: 'GENAPI_NAMESPACE::EVisibility', Paul: 'GENAPI_NAMESPACE::EVisibility') -> "GENAPI_NAMESPACE::EVisibility":
    return _genicam.CombineVisibility(Peter, Paul)
CombineVisibility = _genicam.CombineVisibility

def IsCacheable(CachingMode: 'GENAPI_NAMESPACE::ECachingMode') -> "bool":
    return _genicam.IsCacheable(CachingMode)
IsCacheable = _genicam.IsCacheable

def CombineCachingMode(Peter: 'GENAPI_NAMESPACE::ECachingMode', Paul: 'GENAPI_NAMESPACE::ECachingMode') -> "GENAPI_NAMESPACE::ECachingMode":
    return _genicam.CombineCachingMode(Peter, Paul)
CombineCachingMode = _genicam.CombineCachingMode
class INodeMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INodeMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INodeMap, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNodes(self) -> "void":
        return _genicam.INodeMap_GetNodes(self)

    def GetNode(self, Name: 'GENICAM_NAMESPACE::gcstring const &') -> "GENAPI_NAMESPACE::INode *":
        return _genicam.INodeMap_GetNode(self, Name)

    def InvalidateNodes(self) -> "void":
        return _genicam.INodeMap_InvalidateNodes(self)

    def Connect(self, *args) -> "bool":
        return _genicam.INodeMap_Connect(self, *args)

    def GetDeviceName(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.INodeMap_GetDeviceName(self)

    DeviceName = property(GetDeviceName)


    def Poll(self, ElapsedTime: 'int64_t') -> "void":
        return _genicam.INodeMap_Poll(self, ElapsedTime)

    def GetLock(self) -> "CLock &":
        return _genicam.INodeMap_GetLock(self)

    def GetNumNodes(self) -> "uint64_t":
        return _genicam.INodeMap_GetNumNodes(self)

    def GetDeviceInfo(self) -> "GENAPI_NAMESPACE::IDeviceInfo *":
        return _genicam.INodeMap_GetDeviceInfo(self)

    DeviceInfo = property(GetDeviceInfo)



    def __getattr__(self, attribute):
        if attribute in self.__dict__ or attribute in ( "thisown","this"):
            return object.__getattr__(self, attribute)
        else:
            return self.GetNode(attribute)

    def __setattr__(self, attribute, val):
        if attribute in self.__dict__ or attribute in ( "thisown","this"):
            object.__setattr__(self, attribute, val)
        else:
            self.GetNode(attribute).SetValue(val)

    def __dir__(self):
        l = []
        l += [x for x in dir(type(self))]
        l += [x for x in self.__dict__.keys()]
        try:
            l += [x.GetNode().GetName() for x in filter(lambda n: n.GetNode().IsFeature(), self.GetNodes())]
        except:
            pass
        try:
            l += [x.GetName() for x in filter(lambda n: "ChunkData" in (f.Name for f in n.GetParents()), self.GetNodes())]
        except:
            pass 
        return sorted(set(l))

INodeMap_swigregister = _genicam.INodeMap_swigregister
INodeMap_swigregister(INodeMap)


_genicam.cbPostInsideLock_swigconstant(_genicam)
cbPostInsideLock = _genicam.cbPostInsideLock

_genicam.cbPostOutsideLock_swigconstant(_genicam)
cbPostOutsideLock = _genicam.cbPostOutsideLock
class PyNodeCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyNodeCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyNodeCallback, name)
    __repr__ = _swig_repr

    def __init__(self, pNode: 'INode', PyFunc: 'PyObject *', CallbackType: 'GENAPI_NAMESPACE::ECallbackType'):
        this = _genicam.new_PyNodeCallback(pNode, PyFunc, CallbackType)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_PyNodeCallback
    __del__ = lambda self: None

    def GetNode(self) -> "GENAPI_NAMESPACE::INode *":
        return _genicam.PyNodeCallback_GetNode(self)
PyNodeCallback_swigregister = _genicam.PyNodeCallback_swigregister
PyNodeCallback_swigregister(PyNodeCallback)


def Register(node, callback_fun, callback_type=cbPostInsideLock):
    assert callback_type in ( cbPostOutsideLock, cbPostInsideLock)
    cb = PyNodeCallback(node, callback_fun, callback_type)
    cb.thisown = 0
    return node.RegisterCallback(cb)



def Deregister(pCallbackInfo: 'GENAPI_NAMESPACE::CallbackHandleType') -> "void":
    return _genicam.Deregister(pCallbackInfo)
Deregister = _genicam.Deregister
class IValue(IBase):
    __swig_setmethods__ = {}
    for _s in [IBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IValue, name, value)
    __swig_getmethods__ = {}
    for _s in [IBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IValue, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNode(self) -> "GENAPI_NAMESPACE::INode *":
        return _genicam.IValue_GetNode(self)

    Node = property(GetNode)


    def ToString(self, Verify: 'bool'=False, IgnoreCache: 'bool'=False) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.IValue_ToString(self, Verify, IgnoreCache)

    def FromString(self, ValueStr: 'GENICAM_NAMESPACE::gcstring const &', Verify: 'bool'=True) -> "void":
        return _genicam.IValue_FromString(self, ValueStr, Verify)

    def IsValueCacheValid(self) -> "bool":
        return _genicam.IValue_IsValueCacheValid(self)
IValue_swigregister = _genicam.IValue_swigregister
IValue_swigregister(IValue)

class node_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, node_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, node_vector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _genicam.node_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _genicam.node_vector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _genicam.node_vector___bool__(self)

    def __len__(self) -> "std::vector< GENAPI_NAMESPACE::INode * >::size_type":
        return _genicam.node_vector___len__(self)

    def pop(self) -> "std::vector< GENAPI_NAMESPACE::INode * >::value_type":
        return _genicam.node_vector_pop(self)

    def __getslice__(self, i: 'std::vector< GENAPI_NAMESPACE::INode * >::difference_type', j: 'std::vector< GENAPI_NAMESPACE::INode * >::difference_type') -> "std::vector< GENAPI_NAMESPACE::INode *,std::allocator< GENAPI_NAMESPACE::INode * > > *":
        return _genicam.node_vector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _genicam.node_vector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< GENAPI_NAMESPACE::INode * >::difference_type', j: 'std::vector< GENAPI_NAMESPACE::INode * >::difference_type') -> "void":
        return _genicam.node_vector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _genicam.node_vector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< GENAPI_NAMESPACE::INode * >::value_type":
        return _genicam.node_vector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _genicam.node_vector___setitem__(self, *args)

    def append(self, x: 'INode') -> "void":
        return _genicam.node_vector_append(self, x)

    def empty(self) -> "bool":
        return _genicam.node_vector_empty(self)

    def size(self) -> "std::vector< GENAPI_NAMESPACE::INode * >::size_type":
        return _genicam.node_vector_size(self)

    def clear(self) -> "void":
        return _genicam.node_vector_clear(self)

    def swap(self, v: 'node_vector') -> "void":
        return _genicam.node_vector_swap(self, v)

    def get_allocator(self) -> "std::vector< GENAPI_NAMESPACE::INode * >::allocator_type":
        return _genicam.node_vector_get_allocator(self)

    def begin(self) -> "std::vector< GENAPI_NAMESPACE::INode * >::iterator":
        return _genicam.node_vector_begin(self)

    def end(self) -> "std::vector< GENAPI_NAMESPACE::INode * >::iterator":
        return _genicam.node_vector_end(self)

    def rbegin(self) -> "std::vector< GENAPI_NAMESPACE::INode * >::reverse_iterator":
        return _genicam.node_vector_rbegin(self)

    def rend(self) -> "std::vector< GENAPI_NAMESPACE::INode * >::reverse_iterator":
        return _genicam.node_vector_rend(self)

    def pop_back(self) -> "void":
        return _genicam.node_vector_pop_back(self)

    def erase(self, *args) -> "std::vector< GENAPI_NAMESPACE::INode * >::iterator":
        return _genicam.node_vector_erase(self, *args)

    def __init__(self, *args):
        this = _genicam.new_node_vector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'INode') -> "void":
        return _genicam.node_vector_push_back(self, x)

    def front(self) -> "std::vector< GENAPI_NAMESPACE::INode * >::value_type":
        return _genicam.node_vector_front(self)

    def back(self) -> "std::vector< GENAPI_NAMESPACE::INode * >::value_type":
        return _genicam.node_vector_back(self)

    def assign(self, n: 'std::vector< GENAPI_NAMESPACE::INode * >::size_type', x: 'INode') -> "void":
        return _genicam.node_vector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _genicam.node_vector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _genicam.node_vector_insert(self, *args)

    def reserve(self, n: 'std::vector< GENAPI_NAMESPACE::INode * >::size_type') -> "void":
        return _genicam.node_vector_reserve(self, n)

    def capacity(self) -> "std::vector< GENAPI_NAMESPACE::INode * >::size_type":
        return _genicam.node_vector_capacity(self)
    __swig_destroy__ = _genicam.delete_node_vector
    __del__ = lambda self: None
node_vector_swigregister = _genicam.node_vector_swigregister
node_vector_swigregister(node_vector)

class value_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, value_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, value_vector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _genicam.value_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _genicam.value_vector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _genicam.value_vector___bool__(self)

    def __len__(self) -> "std::vector< GENAPI_NAMESPACE::IValue * >::size_type":
        return _genicam.value_vector___len__(self)

    def pop(self) -> "std::vector< GENAPI_NAMESPACE::IValue * >::value_type":
        return _genicam.value_vector_pop(self)

    def __getslice__(self, i: 'std::vector< GENAPI_NAMESPACE::IValue * >::difference_type', j: 'std::vector< GENAPI_NAMESPACE::IValue * >::difference_type') -> "std::vector< GENAPI_NAMESPACE::IValue *,std::allocator< GENAPI_NAMESPACE::IValue * > > *":
        return _genicam.value_vector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _genicam.value_vector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< GENAPI_NAMESPACE::IValue * >::difference_type', j: 'std::vector< GENAPI_NAMESPACE::IValue * >::difference_type') -> "void":
        return _genicam.value_vector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _genicam.value_vector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< GENAPI_NAMESPACE::IValue * >::value_type":
        return _genicam.value_vector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _genicam.value_vector___setitem__(self, *args)

    def append(self, x: 'IValue') -> "void":
        return _genicam.value_vector_append(self, x)

    def empty(self) -> "bool":
        return _genicam.value_vector_empty(self)

    def size(self) -> "std::vector< GENAPI_NAMESPACE::IValue * >::size_type":
        return _genicam.value_vector_size(self)

    def clear(self) -> "void":
        return _genicam.value_vector_clear(self)

    def swap(self, v: 'value_vector') -> "void":
        return _genicam.value_vector_swap(self, v)

    def get_allocator(self) -> "std::vector< GENAPI_NAMESPACE::IValue * >::allocator_type":
        return _genicam.value_vector_get_allocator(self)

    def begin(self) -> "std::vector< GENAPI_NAMESPACE::IValue * >::iterator":
        return _genicam.value_vector_begin(self)

    def end(self) -> "std::vector< GENAPI_NAMESPACE::IValue * >::iterator":
        return _genicam.value_vector_end(self)

    def rbegin(self) -> "std::vector< GENAPI_NAMESPACE::IValue * >::reverse_iterator":
        return _genicam.value_vector_rbegin(self)

    def rend(self) -> "std::vector< GENAPI_NAMESPACE::IValue * >::reverse_iterator":
        return _genicam.value_vector_rend(self)

    def pop_back(self) -> "void":
        return _genicam.value_vector_pop_back(self)

    def erase(self, *args) -> "std::vector< GENAPI_NAMESPACE::IValue * >::iterator":
        return _genicam.value_vector_erase(self, *args)

    def __init__(self, *args):
        this = _genicam.new_value_vector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'IValue') -> "void":
        return _genicam.value_vector_push_back(self, x)

    def front(self) -> "std::vector< GENAPI_NAMESPACE::IValue * >::value_type":
        return _genicam.value_vector_front(self)

    def back(self) -> "std::vector< GENAPI_NAMESPACE::IValue * >::value_type":
        return _genicam.value_vector_back(self)

    def assign(self, n: 'std::vector< GENAPI_NAMESPACE::IValue * >::size_type', x: 'IValue') -> "void":
        return _genicam.value_vector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _genicam.value_vector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _genicam.value_vector_insert(self, *args)

    def reserve(self, n: 'std::vector< GENAPI_NAMESPACE::IValue * >::size_type') -> "void":
        return _genicam.value_vector_reserve(self, n)

    def capacity(self) -> "std::vector< GENAPI_NAMESPACE::IValue * >::size_type":
        return _genicam.value_vector_capacity(self)
    __swig_destroy__ = _genicam.delete_value_vector
    __del__ = lambda self: None
value_vector_swigregister = _genicam.value_vector_swigregister
value_vector_swigregister(value_vector)

class string_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string_vector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _genicam.string_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _genicam.string_vector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _genicam.string_vector___bool__(self)

    def __len__(self) -> "std::vector< GENICAM_NAMESPACE::gcstring >::size_type":
        return _genicam.string_vector___len__(self)

    def pop(self) -> "std::vector< GENICAM_NAMESPACE::gcstring >::value_type":
        return _genicam.string_vector_pop(self)

    def __getslice__(self, i: 'std::vector< GENICAM_NAMESPACE::gcstring >::difference_type', j: 'std::vector< GENICAM_NAMESPACE::gcstring >::difference_type') -> "std::vector< GENICAM_NAMESPACE::gcstring,std::allocator< GENICAM_NAMESPACE::gcstring > > *":
        return _genicam.string_vector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _genicam.string_vector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< GENICAM_NAMESPACE::gcstring >::difference_type', j: 'std::vector< GENICAM_NAMESPACE::gcstring >::difference_type') -> "void":
        return _genicam.string_vector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _genicam.string_vector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< GENICAM_NAMESPACE::gcstring >::value_type const &":
        return _genicam.string_vector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _genicam.string_vector___setitem__(self, *args)

    def append(self, x: 'std::vector< GENICAM_NAMESPACE::gcstring >::value_type const &') -> "void":
        return _genicam.string_vector_append(self, x)

    def empty(self) -> "bool":
        return _genicam.string_vector_empty(self)

    def size(self) -> "std::vector< GENICAM_NAMESPACE::gcstring >::size_type":
        return _genicam.string_vector_size(self)

    def clear(self) -> "void":
        return _genicam.string_vector_clear(self)

    def swap(self, v: 'string_vector') -> "void":
        return _genicam.string_vector_swap(self, v)

    def get_allocator(self) -> "std::vector< GENICAM_NAMESPACE::gcstring >::allocator_type":
        return _genicam.string_vector_get_allocator(self)

    def begin(self) -> "std::vector< GENICAM_NAMESPACE::gcstring >::iterator":
        return _genicam.string_vector_begin(self)

    def end(self) -> "std::vector< GENICAM_NAMESPACE::gcstring >::iterator":
        return _genicam.string_vector_end(self)

    def rbegin(self) -> "std::vector< GENICAM_NAMESPACE::gcstring >::reverse_iterator":
        return _genicam.string_vector_rbegin(self)

    def rend(self) -> "std::vector< GENICAM_NAMESPACE::gcstring >::reverse_iterator":
        return _genicam.string_vector_rend(self)

    def pop_back(self) -> "void":
        return _genicam.string_vector_pop_back(self)

    def erase(self, *args) -> "std::vector< GENICAM_NAMESPACE::gcstring >::iterator":
        return _genicam.string_vector_erase(self, *args)

    def __init__(self, *args):
        this = _genicam.new_string_vector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'std::vector< GENICAM_NAMESPACE::gcstring >::value_type const &') -> "void":
        return _genicam.string_vector_push_back(self, x)

    def front(self) -> "std::vector< GENICAM_NAMESPACE::gcstring >::value_type const &":
        return _genicam.string_vector_front(self)

    def back(self) -> "std::vector< GENICAM_NAMESPACE::gcstring >::value_type const &":
        return _genicam.string_vector_back(self)

    def assign(self, n: 'std::vector< GENICAM_NAMESPACE::gcstring >::size_type', x: 'std::vector< GENICAM_NAMESPACE::gcstring >::value_type const &') -> "void":
        return _genicam.string_vector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _genicam.string_vector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _genicam.string_vector_insert(self, *args)

    def reserve(self, n: 'std::vector< GENICAM_NAMESPACE::gcstring >::size_type') -> "void":
        return _genicam.string_vector_reserve(self, n)

    def capacity(self) -> "std::vector< GENICAM_NAMESPACE::gcstring >::size_type":
        return _genicam.string_vector_capacity(self)
    __swig_destroy__ = _genicam.delete_string_vector
    __del__ = lambda self: None
string_vector_swigregister = _genicam.string_vector_swigregister
string_vector_swigregister(string_vector)

class IPort(IBase):
    __swig_setmethods__ = {}
    for _s in [IBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPort, name, value)
    __swig_getmethods__ = {}
    for _s in [IBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPort, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Read(self, Address: 'int64_t', pBuffer: 'void *') -> "void":
        return _genicam.IPort_Read(self, Address, pBuffer)

    def Write(self, Address: 'int64_t', pBuffer: 'void const *') -> "void":
        return _genicam.IPort_Write(self, Address, pBuffer)

    def GetNode(self) -> "GENAPI_NAMESPACE::INode *":
        return _genicam.IPort_GetNode(self)

    def GetChunkID(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.IPort_GetChunkID(self)

    def CacheChunkData(self) -> "GENAPI_NAMESPACE::EYesNo":
        return _genicam.IPort_CacheChunkData(self)

    def GetSwapEndianess(self) -> "GENAPI_NAMESPACE::EYesNo":
        return _genicam.IPort_GetSwapEndianess(self)

    Node = property(GetNode)


    ChunkID = property(GetChunkID)

IPort_swigregister = _genicam.IPort_swigregister
IPort_swigregister(IPort)


_genicam.CHUNK_BASE_ADDRESS_REGISTER_LEN_swigconstant(_genicam)
CHUNK_BASE_ADDRESS_REGISTER_LEN = _genicam.CHUNK_BASE_ADDRESS_REGISTER_LEN

_genicam.CHUNK_LENGTH_REGISTER_LEN_swigconstant(_genicam)
CHUNK_LENGTH_REGISTER_LEN = _genicam.CHUNK_LENGTH_REGISTER_LEN
class IChunkPort(IPort):
    __swig_setmethods__ = {}
    for _s in [IPort]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IChunkPort, name, value)
    __swig_getmethods__ = {}
    for _s in [IPort]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IChunkPort, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetChunkID(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.IChunkPort_GetChunkID(self)

    ChunkID = property(GetChunkID)


    def CacheChunkData(self) -> "GENAPI_NAMESPACE::EYesNo":
        return _genicam.IChunkPort_CacheChunkData(self)
IChunkPort_swigregister = _genicam.IChunkPort_swigregister
IChunkPort_swigregister(IChunkPort)

class IPortConstruct(IPort):
    __swig_setmethods__ = {}
    for _s in [IPort]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPortConstruct, name, value)
    __swig_getmethods__ = {}
    for _s in [IPort]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPortConstruct, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetSwapEndianess(self) -> "GENAPI_NAMESPACE::EYesNo":
        return _genicam.IPortConstruct_GetSwapEndianess(self)
IPortConstruct_swigregister = _genicam.IPortConstruct_swigregister
IPortConstruct_swigregister(IPortConstruct)

class IPortWriteList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPortWriteList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPortWriteList, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Write(self, pBuffer: 'void const *', Address: 'int64_t', Length: 'int64_t') -> "void":
        return _genicam.IPortWriteList_Write(self, pBuffer, Address, Length)

    def Replay(self, pPort: 'IPort') -> "void":
        return _genicam.IPortWriteList_Replay(self, pPort)

    def SetCookie(self, Value: 'int64_t const') -> "void":
        return _genicam.IPortWriteList_SetCookie(self, Value)

    def GetCookie(self) -> "int64_t":
        return _genicam.IPortWriteList_GetCookie(self)
IPortWriteList_swigregister = _genicam.IPortWriteList_swigregister
IPortWriteList_swigregister(IPortWriteList)

class IPortReplay(IPort):
    __swig_setmethods__ = {}
    for _s in [IPort]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPortReplay, name, value)
    __swig_getmethods__ = {}
    for _s in [IPort]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPortReplay, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Replay(self, pPortRecorder: 'IPortWriteList', Invalidate: 'bool'=True) -> "void":
        return _genicam.IPortReplay_Replay(self, pPortRecorder, Invalidate)
IPortReplay_swigregister = _genicam.IPortReplay_swigregister
IPortReplay_swigregister(IPortReplay)

class IPortRecorder(IPortReplay):
    __swig_setmethods__ = {}
    for _s in [IPortReplay]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPortRecorder, name, value)
    __swig_getmethods__ = {}
    for _s in [IPortReplay]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPortRecorder, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def StartRecording(self, pPortRecorder: 'IPortWriteList') -> "void":
        return _genicam.IPortRecorder_StartRecording(self, pPortRecorder)

    def StopRecording(self) -> "void":
        return _genicam.IPortRecorder_StopRecording(self)
IPortRecorder_swigregister = _genicam.IPortRecorder_swigregister
IPortRecorder_swigregister(IPortRecorder)

class CPortImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPortImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPortImpl, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CPortImpl:
            _self = None
        else:
            _self = self
        this = _genicam.new_CPortImpl(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_CPortImpl
    __del__ = lambda self: None

    def GetAccessMode(self) -> "GENAPI_NAMESPACE::EAccessMode":
        return _genicam.CPortImpl_GetAccessMode(self)

    def Read(self, Address: 'int64_t', pBuffer: 'void *') -> "void":
        return _genicam.CPortImpl_Read(self, Address, pBuffer)

    def Write(self, Address: 'int64_t', pBuffer: 'void const *') -> "void":
        return _genicam.CPortImpl_Write(self, Address, pBuffer)

    def InvalidateNode(self) -> "void":
        return _genicam.CPortImpl_InvalidateNode(self)
    def __disown__(self):
        self.this.disown()
        _genicam.disown_CPortImpl(self)
        return weakref_proxy(self)
CPortImpl_swigregister = _genicam.CPortImpl_swigregister
CPortImpl_swigregister(CPortImpl)

class IDeviceInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDeviceInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDeviceInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetModelName(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.IDeviceInfo_GetModelName(self)

    def GetVendorName(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.IDeviceInfo_GetVendorName(self)

    def GetToolTip(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.IDeviceInfo_GetToolTip(self)

    def GetStandardNameSpace(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.IDeviceInfo_GetStandardNameSpace(self)

    def GetGenApiVersion(self) -> "void":
        return _genicam.IDeviceInfo_GetGenApiVersion(self)

    def GetSchemaVersion(self) -> "void":
        return _genicam.IDeviceInfo_GetSchemaVersion(self)

    def GetDeviceVersion(self) -> "void":
        return _genicam.IDeviceInfo_GetDeviceVersion(self)

    def GetProductGuid(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.IDeviceInfo_GetProductGuid(self)

    def GetVersionGuid(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.IDeviceInfo_GetVersionGuid(self)
IDeviceInfo_swigregister = _genicam.IDeviceInfo_swigregister
IDeviceInfo_swigregister(IDeviceInfo)

class CNodeMapRef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNodeMapRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNodeMapRef, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _genicam.new_CNodeMapRef(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_CNodeMapRef
    __del__ = lambda self: None

    def _LoadXMLFromFile(self, FileName: 'GENICAM_NAMESPACE::gcstring') -> "void":
        return _genicam.CNodeMapRef__LoadXMLFromFile(self, FileName)

    def _LoadXMLFromString(self, XMLData: 'GENICAM_NAMESPACE::gcstring const &') -> "void":
        return _genicam.CNodeMapRef__LoadXMLFromString(self, XMLData)

    def _GetDeviceName(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.CNodeMapRef__GetDeviceName(self)

    def _Poll(self, ElapsedTime: 'int64_t') -> "void":
        return _genicam.CNodeMapRef__Poll(self, ElapsedTime)

    def _Destroy(self) -> "void":
        return _genicam.CNodeMapRef__Destroy(self)
    __swig_getmethods__["_ClearXMLCache"] = lambda x: _genicam.CNodeMapRef__ClearXMLCache
    if _newclass:
        _ClearXMLCache = staticmethod(_genicam.CNodeMapRef__ClearXMLCache)

    def _GetNodes(self) -> "void":
        return _genicam.CNodeMapRef__GetNodes(self)

    def _GetNode(self, key: 'GENICAM_NAMESPACE::gcstring const &') -> "GENAPI_NAMESPACE::INode *":
        return _genicam.CNodeMapRef__GetNode(self, key)

    def GetNode(self, key: 'GENICAM_NAMESPACE::gcstring const &') -> "GENAPI_NAMESPACE::INode *":
        return _genicam.CNodeMapRef_GetNode(self, key)

    def _InvalidateNodes(self) -> "void":
        return _genicam.CNodeMapRef__InvalidateNodes(self)

    def _Connect(self, *args) -> "bool":
        return _genicam.CNodeMapRef__Connect(self, *args)
    __swig_setmethods__["_Ptr"] = _genicam.CNodeMapRef__Ptr_set
    __swig_getmethods__["_Ptr"] = _genicam.CNodeMapRef__Ptr_get
    if _newclass:
        _Ptr = _swig_property(_genicam.CNodeMapRef__Ptr_get, _genicam.CNodeMapRef__Ptr_set)

    def GetDeviceInfo(self) -> "GENAPI_NAMESPACE::IDeviceInfo *":
        return _genicam.CNodeMapRef_GetDeviceInfo(self)

    DeviceInfo = property(GetDeviceInfo)


    def __getattr__(self, attribute):
        if attribute in self.__dict__ or attribute in ( "thisown","this"):
            return object.__getattr__(self, attribute)
        else:
            return self.GetNode(attribute)

    def __setattr__(self, attribute, val):
        if attribute in self.__dict__ or attribute in ( "thisown","this"):
            object.__setattr__(self, attribute, val)
        else:
            self.GetNode(attribute).SetValue(val)

    def __dir__(self):
        l = []
        l += [x for x in dir(type(self))]
        l += [x for x in self.__dict__.keys()]
        try:
            l += [x.GetNode().GetName() for x in filter(lambda n: n.GetNode().IsFeature(), self.GetNodeMap().GetNodes())]
        except:
            pass
        return sorted(set(l))

CNodeMapRef_swigregister = _genicam.CNodeMapRef_swigregister
CNodeMapRef_swigregister(CNodeMapRef)

def CNodeMapRef__ClearXMLCache() -> "bool":
    return _genicam.CNodeMapRef__ClearXMLCache()
CNodeMapRef__ClearXMLCache = _genicam.CNodeMapRef__ClearXMLCache

class IFloat(IValue):
    __swig_setmethods__ = {}
    for _s in [IValue]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [IValue]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFloat, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value: 'double', Verify: 'bool'=True) -> "void":
        return _genicam.IFloat_SetValue(self, Value, Verify)

    def GetValue(self, Verify: 'bool'=False, IgnoreCache: 'bool'=False) -> "double":
        return _genicam.IFloat_GetValue(self, Verify, IgnoreCache)

    Value = property(GetValue,SetValue)


    def __call__(self) -> "double":
        return _genicam.IFloat___call__(self)

    def GetMin(self) -> "double":
        return _genicam.IFloat_GetMin(self)

    Min = property(GetMin)


    def GetMax(self) -> "double":
        return _genicam.IFloat_GetMax(self)

    Max = property(GetMax)


    def HasInc(self) -> "bool":
        return _genicam.IFloat_HasInc(self)

    def GetIncMode(self) -> "GENAPI_NAMESPACE::EIncMode":
        return _genicam.IFloat_GetIncMode(self)

    IncMode = property(GetIncMode)


    def GetInc(self) -> "double":
        return _genicam.IFloat_GetInc(self)

    Inc = property(GetInc)


    def GetListOfValidValues(self, bounded: 'bool'=True) -> "double_autovector_t":
        return _genicam.IFloat_GetListOfValidValues(self, bounded)

    ListOfValidValues = property(GetListOfValidValues)


    def GetRepresentation(self) -> "GENAPI_NAMESPACE::ERepresentation":
        return _genicam.IFloat_GetRepresentation(self)

    Representation = property(GetRepresentation)


    def GetUnit(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.IFloat_GetUnit(self)

    Unit = property(GetUnit)


    def GetDisplayNotation(self) -> "GENAPI_NAMESPACE::EDisplayNotation":
        return _genicam.IFloat_GetDisplayNotation(self)

    DisplayNotation = property(GetDisplayNotation)


    def GetDisplayPrecision(self) -> "int64_t":
        return _genicam.IFloat_GetDisplayPrecision(self)

    DisplayPrecision = property(GetDisplayPrecision)


    def ImposeMin(self, Value: 'double') -> "void":
        return _genicam.IFloat_ImposeMin(self, Value)

    def ImposeMax(self, Value: 'double') -> "void":
        return _genicam.IFloat_ImposeMax(self, Value)

    def GetIntAlias(self) -> "GENAPI_NAMESPACE::IInteger *":
        return _genicam.IFloat_GetIntAlias(self)

    def GetEnumAlias(self) -> "GENAPI_NAMESPACE::IEnumeration *":
        return _genicam.IFloat_GetEnumAlias(self)

    IntAlias = property(GetIntAlias)


    EnumAlias = property(GetEnumAlias)

IFloat_swigregister = _genicam.IFloat_swigregister
IFloat_swigregister(IFloat)

class IInteger(IValue):
    __swig_setmethods__ = {}
    for _s in [IValue]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IInteger, name, value)
    __swig_getmethods__ = {}
    for _s in [IValue]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IInteger, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value: 'int64_t', Verify: 'bool'=True) -> "void":
        return _genicam.IInteger_SetValue(self, Value, Verify)

    def GetValue(self, Verify: 'bool'=False, IgnoreCache: 'bool'=False) -> "int64_t":
        return _genicam.IInteger_GetValue(self, Verify, IgnoreCache)

    Value = property(GetValue,SetValue)


    def __call__(self) -> "int64_t":
        return _genicam.IInteger___call__(self)

    def GetMin(self) -> "int64_t":
        return _genicam.IInteger_GetMin(self)

    Min = property(GetMin)


    def GetMax(self) -> "int64_t":
        return _genicam.IInteger_GetMax(self)

    Max = property(GetMax)


    def GetIncMode(self) -> "GENAPI_NAMESPACE::EIncMode":
        return _genicam.IInteger_GetIncMode(self)

    IncMode = property(GetIncMode)


    def GetInc(self) -> "int64_t":
        return _genicam.IInteger_GetInc(self)

    Inc = property(GetInc)


    def GetListOfValidValues(self, bounded: 'bool'=True) -> "int64_autovector_t":
        return _genicam.IInteger_GetListOfValidValues(self, bounded)

    ListOfValidValues = property(GetListOfValidValues)


    def GetRepresentation(self) -> "GENAPI_NAMESPACE::ERepresentation":
        return _genicam.IInteger_GetRepresentation(self)

    Representation = property(GetRepresentation)


    def GetUnit(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.IInteger_GetUnit(self)

    Unit = property(GetUnit)


    def ImposeMin(self, Value: 'int64_t') -> "void":
        return _genicam.IInteger_ImposeMin(self, Value)

    def ImposeMax(self, Value: 'int64_t') -> "void":
        return _genicam.IInteger_ImposeMax(self, Value)

    def GetFloatAlias(self) -> "GENAPI_NAMESPACE::IFloat *":
        return _genicam.IInteger_GetFloatAlias(self)

    FloatAlias = property(GetFloatAlias)


    def Set(self, pBuffer: 'uint8_t const *', Verify: 'bool'=True) -> "void":
        return _genicam.IInteger_Set(self, pBuffer, Verify)

    def Get(self, pBuffer: 'uint8_t *', Verify: 'bool'=False, IgnoreCache: 'bool'=False) -> "void":
        return _genicam.IInteger_Get(self, pBuffer, Verify, IgnoreCache)

    def GetLength(self) -> "int64_t":
        return _genicam.IInteger_GetLength(self)

    def GetAddress(self) -> "int64_t":
        return _genicam.IInteger_GetAddress(self)

    Address = property(GetAddress)


    Length = property(GetLength)

IInteger_swigregister = _genicam.IInteger_swigregister
IInteger_swigregister(IInteger)

class IRegister(IValue):
    __swig_setmethods__ = {}
    for _s in [IValue]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IRegister, name, value)
    __swig_getmethods__ = {}
    for _s in [IValue]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IRegister, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Set(self, pBuffer: 'uint8_t const *', Verify: 'bool'=True) -> "void":
        return _genicam.IRegister_Set(self, pBuffer, Verify)

    def Get(self, pBuffer: 'uint8_t *', Verify: 'bool'=False, IgnoreCache: 'bool'=False) -> "void":
        return _genicam.IRegister_Get(self, pBuffer, Verify, IgnoreCache)

    def GetLength(self) -> "int64_t":
        return _genicam.IRegister_GetLength(self)

    Length = property(GetLength)


    def GetAddress(self) -> "int64_t":
        return _genicam.IRegister_GetAddress(self)

    Address = property(GetAddress)


    def GetAll(self):
        return self.Get(self.GetLength())

IRegister_swigregister = _genicam.IRegister_swigregister
IRegister_swigregister(IRegister)

class IEnumEntry(IValue):
    __swig_setmethods__ = {}
    for _s in [IValue]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEnumEntry, name, value)
    __swig_getmethods__ = {}
    for _s in [IValue]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IEnumEntry, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetValue(self) -> "int64_t":
        return _genicam.IEnumEntry_GetValue(self)

    Value = property(GetValue)


    def GetSymbolic(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.IEnumEntry_GetSymbolic(self)

    Symbolic = property(GetSymbolic)


    def GetNumericValue(self) -> "double":
        return _genicam.IEnumEntry_GetNumericValue(self)

    NumericValue = property(GetNumericValue)


    def IsSelfClearing(self) -> "bool":
        return _genicam.IEnumEntry_IsSelfClearing(self)

    def __call__( self ):
        return self.GetValue()

IEnumEntry_swigregister = _genicam.IEnumEntry_swigregister
IEnumEntry_swigregister(IEnumEntry)

class IEnumeration(IValue):
    __swig_setmethods__ = {}
    for _s in [IValue]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEnumeration, name, value)
    __swig_getmethods__ = {}
    for _s in [IValue]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IEnumeration, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetSymbolics(self) -> "void":
        return _genicam.IEnumeration_GetSymbolics(self)

    Symbolics = property(GetSymbolics)


    def GetEntries(self) -> "void":
        return _genicam.IEnumeration_GetEntries(self)

    Entries = property(GetEntries)


    def SetIntValue(self, Value: 'int64_t', Verify: 'bool'=True) -> "void":
        return _genicam.IEnumeration_SetIntValue(self, Value, Verify)

    def GetIntValue(self, Verify: 'bool'=False, IgnoreCache: 'bool'=False) -> "int64_t":
        return _genicam.IEnumeration_GetIntValue(self, Verify, IgnoreCache)

    IntValue = property(GetIntValue,SetIntValue)


    def GetEntryByName(self, Symbolic: 'GENICAM_NAMESPACE::gcstring const &') -> "GENAPI_NAMESPACE::IEnumEntry *":
        return _genicam.IEnumeration_GetEntryByName(self, Symbolic)

    def GetEntry(self, IntValue: 'int64_t const') -> "GENAPI_NAMESPACE::IEnumEntry *":
        return _genicam.IEnumeration_GetEntry(self, IntValue)

    def GetCurrentEntry(self, Verify: 'bool'=False, IgnoreCache: 'bool'=False) -> "GENAPI_NAMESPACE::IEnumEntry *":
        return _genicam.IEnumeration_GetCurrentEntry(self, Verify, IgnoreCache)

    def __call__(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.IEnumeration___call__(self)

    def GetValue(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.IEnumeration_GetValue(self)

    def SetValue(self, entry: 'GENICAM_NAMESPACE::gcstring') -> "void":
        return _genicam.IEnumeration_SetValue(self, entry)

    Value = property(GetValue,SetValue)

IEnumeration_swigregister = _genicam.IEnumeration_swigregister
IEnumeration_swigregister(IEnumeration)

class IBoolean(IValue):
    __swig_setmethods__ = {}
    for _s in [IValue]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IBoolean, name, value)
    __swig_getmethods__ = {}
    for _s in [IValue]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IBoolean, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value: 'bool', Verify: 'bool'=True) -> "void":
        return _genicam.IBoolean_SetValue(self, Value, Verify)

    def GetValue(self, Verify: 'bool'=False, IgnoreCache: 'bool'=False) -> "bool":
        return _genicam.IBoolean_GetValue(self, Verify, IgnoreCache)

    Value = property(GetValue,SetValue)


    def __call__(self) -> "bool":
        return _genicam.IBoolean___call__(self)
IBoolean_swigregister = _genicam.IBoolean_swigregister
IBoolean_swigregister(IBoolean)

class ICommand(IValue):
    __swig_setmethods__ = {}
    for _s in [IValue]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICommand, name, value)
    __swig_getmethods__ = {}
    for _s in [IValue]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ICommand, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Execute(self, Verify: 'bool'=True) -> "void":
        return _genicam.ICommand_Execute(self, Verify)

    def __call__(self) -> "void":
        return _genicam.ICommand___call__(self)

    def IsDone(self, Verify: 'bool'=False) -> "bool":
        return _genicam.ICommand_IsDone(self, Verify)
ICommand_swigregister = _genicam.ICommand_swigregister
ICommand_swigregister(ICommand)

class IString(IValue):
    __swig_setmethods__ = {}
    for _s in [IValue]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IString, name, value)
    __swig_getmethods__ = {}
    for _s in [IValue]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IString, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value: 'GENICAM_NAMESPACE::gcstring const &', Verify: 'bool'=True) -> "void":
        return _genicam.IString_SetValue(self, Value, Verify)

    def GetValue(self, Verify: 'bool'=False, IgnoreCache: 'bool'=False) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.IString_GetValue(self, Verify, IgnoreCache)

    Value = property(GetValue,SetValue)


    def __call__(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.IString___call__(self)

    def GetMaxLength(self) -> "int64_t":
        return _genicam.IString_GetMaxLength(self)

    MaxLength = property(GetMaxLength)


    def GetLength(self) -> "int64_t":
        return _genicam.IString_GetLength(self)

    Length = property(GetLength)

IString_swigregister = _genicam.IString_swigregister
IString_swigregister(IString)

class ICategory(IValue):
    __swig_setmethods__ = {}
    for _s in [IValue]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICategory, name, value)
    __swig_getmethods__ = {}
    for _s in [IValue]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ICategory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetFeatures(self) -> "void":
        return _genicam.ICategory_GetFeatures(self)

    Features = property(GetFeatures)

ICategory_swigregister = _genicam.ICategory_swigregister
ICategory_swigregister(ICategory)

class IReference(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IReference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IReference, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetReference(self, pBase: 'IBase') -> "void":
        return _genicam.IReference_SetReference(self, pBase)
IReference_swigregister = _genicam.IReference_swigregister
IReference_swigregister(IReference)

class IEnumReference(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEnumReference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IEnumReference, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetEnumReference(self, Index: 'int', Name: 'GENICAM_NAMESPACE::gcstring') -> "void":
        return _genicam.IEnumReference_SetEnumReference(self, Index, Name)

    def SetNumEnums(self, NumEnums: 'int') -> "void":
        return _genicam.IEnumReference_SetNumEnums(self, NumEnums)
IEnumReference_swigregister = _genicam.IEnumReference_swigregister
IEnumReference_swigregister(IEnumReference)

class ISelector(IBase):
    __swig_setmethods__ = {}
    for _s in [IBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISelector, name, value)
    __swig_getmethods__ = {}
    for _s in [IBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ISelector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
ISelector_swigregister = _genicam.ISelector_swigregister
ISelector_swigregister(ISelector)

class ISelectorDigit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISelectorDigit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISelectorDigit, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFirst(self) -> "bool":
        return _genicam.ISelectorDigit_SetFirst(self)

    def SetNext(self, Tick: 'bool'=True) -> "bool":
        return _genicam.ISelectorDigit_SetNext(self, Tick)

    def Restore(self) -> "void":
        return _genicam.ISelectorDigit_Restore(self)

    def ToString(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.ISelectorDigit_ToString(self)

    def GetSelectorList(self, Incremental: 'bool'=False) -> "void":
        return _genicam.ISelectorDigit_GetSelectorList(self, Incremental)
ISelectorDigit_swigregister = _genicam.ISelectorDigit_swigregister
ISelectorDigit_swigregister(ISelectorDigit)

class CSelectorSet(ISelectorDigit):
    __swig_setmethods__ = {}
    for _s in [ISelectorDigit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSelectorSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ISelectorDigit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSelectorSet, name)
    __repr__ = _swig_repr

    def __init__(self, pBase: 'IBase'):
        this = _genicam.new_CSelectorSet(pBase)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_CSelectorSet
    __del__ = lambda self: None

    def IsEmpty(self) -> "bool":
        return _genicam.CSelectorSet_IsEmpty(self)

    def SetFirst(self) -> "bool":
        return _genicam.CSelectorSet_SetFirst(self)

    def SetNext(self, Tick: 'bool'=True) -> "bool":
        return _genicam.CSelectorSet_SetNext(self, Tick)

    def Restore(self) -> "void":
        return _genicam.CSelectorSet_Restore(self)

    def ToString(self) -> "GENICAM_NAMESPACE::gcstring":
        return _genicam.CSelectorSet_ToString(self)

    def GetSelectorList(self, Incremental: 'bool'=False) -> "void":
        return _genicam.CSelectorSet_GetSelectorList(self, Incremental)
CSelectorSet_swigregister = _genicam.CSelectorSet_swigregister
CSelectorSet_swigregister(CSelectorSet)

class CChunkPort(IPortConstruct):
    __swig_setmethods__ = {}
    for _s in [IPortConstruct]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChunkPort, name, value)
    __swig_getmethods__ = {}
    for _s in [IPortConstruct]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CChunkPort, name)
    __repr__ = _swig_repr

    def __init__(self, pPort: 'IPort'=None):
        this = _genicam.new_CChunkPort(pPort)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_CChunkPort
    __del__ = lambda self: None

    def GetAccessMode(self) -> "GENAPI_NAMESPACE::EAccessMode":
        return _genicam.CChunkPort_GetAccessMode(self)

    AccessMode = property(GetAccessMode)


    def GetPrincipalInterfaceType(self) -> "GENAPI_NAMESPACE::EInterfaceType":
        return _genicam.CChunkPort_GetPrincipalInterfaceType(self)

    PrincipalInterfaceType = property(GetPrincipalInterfaceType)


    def Read(self, pBuffer: 'void *', Address: 'int64_t', Length: 'int64_t') -> "void":
        return _genicam.CChunkPort_Read(self, pBuffer, Address, Length)

    def Write(self, pBuffer: 'void const *', Address: 'int64_t', Length: 'int64_t') -> "void":
        return _genicam.CChunkPort_Write(self, pBuffer, Address, Length)

    def SetPortImpl(self, pPort: 'IPort') -> "void":
        return _genicam.CChunkPort_SetPortImpl(self, pPort)

    def GetSwapEndianess(self) -> "GENAPI_NAMESPACE::EYesNo":
        return _genicam.CChunkPort_GetSwapEndianess(self)

    def InvalidateNode(self) -> "void":
        return _genicam.CChunkPort_InvalidateNode(self)

    def AttachPort(self, pPort: 'IPort') -> "bool":
        return _genicam.CChunkPort_AttachPort(self, pPort)

    def DetachPort(self) -> "void":
        return _genicam.CChunkPort_DetachPort(self)

    def AttachChunk(self, pBaseAddress: 'uint8_t *', ChunkOffset: 'int64_t', Length: 'int64_t', Cache: 'bool') -> "void":
        return _genicam.CChunkPort_AttachChunk(self, pBaseAddress, ChunkOffset, Length, Cache)

    def DetachChunk(self) -> "void":
        return _genicam.CChunkPort_DetachChunk(self)

    def GetChunkIDLength(self) -> "int":
        return _genicam.CChunkPort_GetChunkIDLength(self)

    def CheckChunkID(self, *args) -> "bool":
        return _genicam.CChunkPort_CheckChunkID(self, *args)

    def UpdateBuffer(self, pBaseAddress: 'uint8_t *') -> "void":
        return _genicam.CChunkPort_UpdateBuffer(self, pBaseAddress)

    def ClearCache(self) -> "void":
        return _genicam.CChunkPort_ClearCache(self)
CChunkPort_swigregister = _genicam.CChunkPort_swigregister
CChunkPort_swigregister(CChunkPort)

class AttachStatistics_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttachStatistics_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttachStatistics_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NumChunkPorts"] = _genicam.AttachStatistics_t_NumChunkPorts_set
    __swig_getmethods__["NumChunkPorts"] = _genicam.AttachStatistics_t_NumChunkPorts_get
    if _newclass:
        NumChunkPorts = _swig_property(_genicam.AttachStatistics_t_NumChunkPorts_get, _genicam.AttachStatistics_t_NumChunkPorts_set)
    __swig_setmethods__["NumChunks"] = _genicam.AttachStatistics_t_NumChunks_set
    __swig_getmethods__["NumChunks"] = _genicam.AttachStatistics_t_NumChunks_get
    if _newclass:
        NumChunks = _swig_property(_genicam.AttachStatistics_t_NumChunks_get, _genicam.AttachStatistics_t_NumChunks_set)
    __swig_setmethods__["NumAttachedChunks"] = _genicam.AttachStatistics_t_NumAttachedChunks_set
    __swig_getmethods__["NumAttachedChunks"] = _genicam.AttachStatistics_t_NumAttachedChunks_get
    if _newclass:
        NumAttachedChunks = _swig_property(_genicam.AttachStatistics_t_NumAttachedChunks_get, _genicam.AttachStatistics_t_NumAttachedChunks_set)

    def __init__(self):
        this = _genicam.new_AttachStatistics_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_AttachStatistics_t
    __del__ = lambda self: None
AttachStatistics_t_swigregister = _genicam.AttachStatistics_t_swigregister
AttachStatistics_t_swigregister(AttachStatistics_t)

class CChunkAdapter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChunkAdapter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CChunkAdapter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _genicam.delete_CChunkAdapter
    __del__ = lambda self: None

    def AttachNodeMap(self, pNodeMap: 'INodeMap') -> "void":
        return _genicam.CChunkAdapter_AttachNodeMap(self, pNodeMap)

    def DetachNodeMap(self) -> "void":
        return _genicam.CChunkAdapter_DetachNodeMap(self)

    def CheckBufferLayout(self, pBuffer: 'uint8_t *') -> "bool":
        return _genicam.CChunkAdapter_CheckBufferLayout(self, pBuffer)

    def AttachBuffer(self, pBuffer: 'uint8_t *', pAttachStatistics: 'AttachStatistics_t'=None) -> "void":
        return _genicam.CChunkAdapter_AttachBuffer(self, pBuffer, pAttachStatistics)

    def DetachBuffer(self) -> "void":
        return _genicam.CChunkAdapter_DetachBuffer(self)

    def UpdateBuffer(self, pBaseAddress: 'uint8_t *') -> "void":
        return _genicam.CChunkAdapter_UpdateBuffer(self, pBaseAddress)

    def ClearCaches(self) -> "void":
        return _genicam.CChunkAdapter_ClearCaches(self)
CChunkAdapter_swigregister = _genicam.CChunkAdapter_swigregister
CChunkAdapter_swigregister(CChunkAdapter)

class CChunkAdapterGEV(CChunkAdapter):
    __swig_setmethods__ = {}
    for _s in [CChunkAdapter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChunkAdapterGEV, name, value)
    __swig_getmethods__ = {}
    for _s in [CChunkAdapter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CChunkAdapterGEV, name)
    __repr__ = _swig_repr

    def __init__(self, pNodeMap: 'INodeMap'=None, MaxChunkCacheSize: 'int64_t'=-1):
        this = _genicam.new_CChunkAdapterGEV(pNodeMap, MaxChunkCacheSize)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_CChunkAdapterGEV
    __del__ = lambda self: None

    def CheckBufferLayout(self, pBuffer: 'uint8_t *') -> "bool":
        return _genicam.CChunkAdapterGEV_CheckBufferLayout(self, pBuffer)

    def AttachBuffer(self, pBuffer: 'uint8_t *', pAttachStatistics: 'AttachStatistics_t'=None) -> "void":
        return _genicam.CChunkAdapterGEV_AttachBuffer(self, pBuffer, pAttachStatistics)
CChunkAdapterGEV_swigregister = _genicam.CChunkAdapterGEV_swigregister
CChunkAdapterGEV_swigregister(CChunkAdapterGEV)

class CChunkAdapterU3V(CChunkAdapter):
    __swig_setmethods__ = {}
    for _s in [CChunkAdapter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChunkAdapterU3V, name, value)
    __swig_getmethods__ = {}
    for _s in [CChunkAdapter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CChunkAdapterU3V, name)
    __repr__ = _swig_repr

    def __init__(self, pNodeMap: 'INodeMap'=None, MaxChunkCacheSize: 'int64_t'=-1):
        this = _genicam.new_CChunkAdapterU3V(pNodeMap, MaxChunkCacheSize)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_CChunkAdapterU3V
    __del__ = lambda self: None

    def CheckBufferLayout(self, pBuffer: 'uint8_t *') -> "bool":
        return _genicam.CChunkAdapterU3V_CheckBufferLayout(self, pBuffer)

    def AttachBuffer(self, pBuffer: 'uint8_t *', pAttachStatistics: 'AttachStatistics_t'=None) -> "void":
        return _genicam.CChunkAdapterU3V_AttachBuffer(self, pBuffer, pAttachStatistics)
CChunkAdapterU3V_swigregister = _genicam.CChunkAdapterU3V_swigregister
CChunkAdapterU3V_swigregister(CChunkAdapterU3V)

class SingleChunkData_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SingleChunkData_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SingleChunkData_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ChunkID"] = _genicam.SingleChunkData_t_ChunkID_set
    __swig_getmethods__["ChunkID"] = _genicam.SingleChunkData_t_ChunkID_get
    if _newclass:
        ChunkID = _swig_property(_genicam.SingleChunkData_t_ChunkID_get, _genicam.SingleChunkData_t_ChunkID_set)
    __swig_setmethods__["ChunkOffset"] = _genicam.SingleChunkData_t_ChunkOffset_set
    __swig_getmethods__["ChunkOffset"] = _genicam.SingleChunkData_t_ChunkOffset_get
    if _newclass:
        ChunkOffset = _swig_property(_genicam.SingleChunkData_t_ChunkOffset_get, _genicam.SingleChunkData_t_ChunkOffset_set)
    __swig_setmethods__["ChunkLength"] = _genicam.SingleChunkData_t_ChunkLength_set
    __swig_getmethods__["ChunkLength"] = _genicam.SingleChunkData_t_ChunkLength_get
    if _newclass:
        ChunkLength = _swig_property(_genicam.SingleChunkData_t_ChunkLength_get, _genicam.SingleChunkData_t_ChunkLength_set)

    def __init__(self):
        this = _genicam.new_SingleChunkData_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_SingleChunkData_t
    __del__ = lambda self: None
SingleChunkData_t_swigregister = _genicam.SingleChunkData_t_swigregister
SingleChunkData_t_swigregister(SingleChunkData_t)

class SingleChunkDataStr_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SingleChunkDataStr_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SingleChunkDataStr_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ChunkID"] = _genicam.SingleChunkDataStr_t_ChunkID_set
    __swig_getmethods__["ChunkID"] = _genicam.SingleChunkDataStr_t_ChunkID_get
    if _newclass:
        ChunkID = _swig_property(_genicam.SingleChunkDataStr_t_ChunkID_get, _genicam.SingleChunkDataStr_t_ChunkID_set)
    __swig_setmethods__["ChunkOffset"] = _genicam.SingleChunkDataStr_t_ChunkOffset_set
    __swig_getmethods__["ChunkOffset"] = _genicam.SingleChunkDataStr_t_ChunkOffset_get
    if _newclass:
        ChunkOffset = _swig_property(_genicam.SingleChunkDataStr_t_ChunkOffset_get, _genicam.SingleChunkDataStr_t_ChunkOffset_set)
    __swig_setmethods__["ChunkLength"] = _genicam.SingleChunkDataStr_t_ChunkLength_set
    __swig_getmethods__["ChunkLength"] = _genicam.SingleChunkDataStr_t_ChunkLength_get
    if _newclass:
        ChunkLength = _swig_property(_genicam.SingleChunkDataStr_t_ChunkLength_get, _genicam.SingleChunkDataStr_t_ChunkLength_set)

    def __init__(self):
        this = _genicam.new_SingleChunkDataStr_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_SingleChunkDataStr_t
    __del__ = lambda self: None
SingleChunkDataStr_t_swigregister = _genicam.SingleChunkDataStr_t_swigregister
SingleChunkDataStr_t_swigregister(SingleChunkDataStr_t)

class CChunkAdapterGeneric(CChunkAdapter):
    __swig_setmethods__ = {}
    for _s in [CChunkAdapter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChunkAdapterGeneric, name, value)
    __swig_getmethods__ = {}
    for _s in [CChunkAdapter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CChunkAdapterGeneric, name)
    __repr__ = _swig_repr

    def __init__(self, pNodeMap: 'INodeMap'=None, MaxChunkCacheSize: 'int64_t'=-1):
        this = _genicam.new_CChunkAdapterGeneric(pNodeMap, MaxChunkCacheSize)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_CChunkAdapterGeneric
    __del__ = lambda self: None

    def CheckBufferLayout(self, pBuffer: 'uint8_t *') -> "bool":
        return _genicam.CChunkAdapterGeneric_CheckBufferLayout(self, pBuffer)

    def AttachBuffer(self, *args) -> "void":
        return _genicam.CChunkAdapterGeneric_AttachBuffer(self, *args)
CChunkAdapterGeneric_swigregister = _genicam.CChunkAdapterGeneric_swigregister
CChunkAdapterGeneric_swigregister(CChunkAdapterGeneric)

class CEventPort(IPortConstruct):
    __swig_setmethods__ = {}
    for _s in [IPortConstruct]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEventPort, name, value)
    __swig_getmethods__ = {}
    for _s in [IPortConstruct]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEventPort, name)
    __repr__ = _swig_repr

    def __init__(self, pNode: 'INode'=None):
        this = _genicam.new_CEventPort(pNode)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_CEventPort
    __del__ = lambda self: None

    def GetAccessMode(self) -> "GENAPI_NAMESPACE::EAccessMode":
        return _genicam.CEventPort_GetAccessMode(self)

    AccessMode = property(GetAccessMode)


    def GetPrincipalInterfaceType(self) -> "GENAPI_NAMESPACE::EInterfaceType":
        return _genicam.CEventPort_GetPrincipalInterfaceType(self)

    PrincipalInterfaceType = property(GetPrincipalInterfaceType)


    def Read(self, pBuffer: 'void *', Address: 'int64_t', Length: 'int64_t') -> "void":
        return _genicam.CEventPort_Read(self, pBuffer, Address, Length)

    def Write(self, pBuffer: 'void const *', Address: 'int64_t', Length: 'int64_t') -> "void":
        return _genicam.CEventPort_Write(self, pBuffer, Address, Length)

    def SetPortImpl(self, pPort: 'IPort') -> "void":
        return _genicam.CEventPort_SetPortImpl(self, pPort)

    def GetSwapEndianess(self) -> "GENAPI_NAMESPACE::EYesNo":
        return _genicam.CEventPort_GetSwapEndianess(self)

    def InvalidateNode(self) -> "void":
        return _genicam.CEventPort_InvalidateNode(self)

    def AttachNode(self, pNode: 'INode') -> "bool":
        return _genicam.CEventPort_AttachNode(self, pNode)

    def DetachNode(self) -> "void":
        return _genicam.CEventPort_DetachNode(self)

    def GetEventIDLength(self) -> "int":
        return _genicam.CEventPort_GetEventIDLength(self)

    def CheckEventID(self, *args) -> "bool":
        return _genicam.CEventPort_CheckEventID(self, *args)

    def AttachEvent(self, pBaseAddress: 'uint8_t *', Length: 'int64_t') -> "void":
        return _genicam.CEventPort_AttachEvent(self, pBaseAddress, Length)

    def DetachEvent(self) -> "void":
        return _genicam.CEventPort_DetachEvent(self)
CEventPort_swigregister = _genicam.CEventPort_swigregister
CEventPort_swigregister(CEventPort)

class CEventAdapter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEventAdapter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CEventAdapter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _genicam.delete_CEventAdapter
    __del__ = lambda self: None

    def AttachNodeMap(self, pNodeMap: 'INodeMap') -> "void":
        return _genicam.CEventAdapter_AttachNodeMap(self, pNodeMap)

    def DetachNodeMap(self) -> "void":
        return _genicam.CEventAdapter_DetachNodeMap(self)

    def DeliverMessage(self, msg: 'uint8_t const []') -> "void":
        return _genicam.CEventAdapter_DeliverMessage(self, msg)
CEventAdapter_swigregister = _genicam.CEventAdapter_swigregister
CEventAdapter_swigregister(CEventAdapter)

class CEventAdapterGEV(CEventAdapter):
    __swig_setmethods__ = {}
    for _s in [CEventAdapter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEventAdapterGEV, name, value)
    __swig_getmethods__ = {}
    for _s in [CEventAdapter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEventAdapterGEV, name)
    __repr__ = _swig_repr

    def __init__(self, pNodeMap: 'INodeMap'=None):
        this = _genicam.new_CEventAdapterGEV(pNodeMap)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_CEventAdapterGEV
    __del__ = lambda self: None

    def DeliverMessage(self, msg: 'uint8_t const []') -> "void":
        return _genicam.CEventAdapterGEV_DeliverMessage(self, msg)
CEventAdapterGEV_swigregister = _genicam.CEventAdapterGEV_swigregister
CEventAdapterGEV_swigregister(CEventAdapterGEV)

class CEventAdapterU3V(CEventAdapter):
    __swig_setmethods__ = {}
    for _s in [CEventAdapter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEventAdapterU3V, name, value)
    __swig_getmethods__ = {}
    for _s in [CEventAdapter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEventAdapterU3V, name)
    __repr__ = _swig_repr

    def __init__(self, pNodeMap: 'INodeMap'=None):
        this = _genicam.new_CEventAdapterU3V(pNodeMap)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_CEventAdapterU3V
    __del__ = lambda self: None

    def DeliverMessage(self, msg: 'uint8_t const []') -> "void":
        return _genicam.CEventAdapterU3V_DeliverMessage(self, msg)
CEventAdapterU3V_swigregister = _genicam.CEventAdapterU3V_swigregister
CEventAdapterU3V_swigregister(CEventAdapterU3V)

class CEventAdapterCL(CEventAdapter):
    __swig_setmethods__ = {}
    for _s in [CEventAdapter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEventAdapterCL, name, value)
    __swig_getmethods__ = {}
    for _s in [CEventAdapter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEventAdapterCL, name)
    __repr__ = _swig_repr

    def __init__(self, pNodeMap: 'INodeMap'=None):
        this = _genicam.new_CEventAdapterCL(pNodeMap)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_CEventAdapterCL
    __del__ = lambda self: None

    def DeliverMessage(self, msg: 'uint8_t const []') -> "void":
        return _genicam.CEventAdapterCL_DeliverMessage(self, msg)
CEventAdapterCL_swigregister = _genicam.CEventAdapterCL_swigregister
CEventAdapterCL_swigregister(CEventAdapterCL)

class CEventAdapterGeneric(CEventAdapter):
    __swig_setmethods__ = {}
    for _s in [CEventAdapter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEventAdapterGeneric, name, value)
    __swig_getmethods__ = {}
    for _s in [CEventAdapter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEventAdapterGeneric, name)
    __repr__ = _swig_repr

    def __init__(self, pNodeMap: 'INodeMap'=None):
        this = _genicam.new_CEventAdapterGeneric(pNodeMap)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _genicam.delete_CEventAdapterGeneric
    __del__ = lambda self: None

    def DeliverMessage(self, *args) -> "void":
        return _genicam.CEventAdapterGeneric_DeliverMessage(self, *args)
CEventAdapterGeneric_swigregister = _genicam.CEventAdapterGeneric_swigregister
CEventAdapterGeneric_swigregister(CEventAdapterGeneric)

class FileProtocolAdapter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileProtocolAdapter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileProtocolAdapter, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _genicam.new_FileProtocolAdapter()
        try:
            self.this.append(this)
        except:
            self.this = this

    def attach(self, pInterface: 'INodeMap') -> "bool":
        return _genicam.FileProtocolAdapter_attach(self, pInterface)

    def openFile(self, pFileName: 'char const *', mode: 'char const *') -> "bool":
        return _genicam.FileProtocolAdapter_openFile(self, pFileName, mode)

    def closeFile(self, pFileName: 'char const *') -> "bool":
        return _genicam.FileProtocolAdapter_closeFile(self, pFileName)

    def write(self, pBuffer: 'char const *', offs: 'int64_t', pFileName: 'char const *') -> "std::streamsize":
        return _genicam.FileProtocolAdapter_write(self, pBuffer, offs, pFileName)

    def read(self, pBuffer: 'char *', offs: 'int64_t', pFileName: 'char const *') -> "std::streamsize":
        return _genicam.FileProtocolAdapter_read(self, pBuffer, offs, pFileName)

    def getBufSize(self, pFileName: 'char const *', mode: 'char const *') -> "int64_t":
        return _genicam.FileProtocolAdapter_getBufSize(self, pFileName, mode)

    def deleteFile(self, pFileName: 'char const *') -> "bool":
        return _genicam.FileProtocolAdapter_deleteFile(self, pFileName)
    __swig_destroy__ = _genicam.delete_FileProtocolAdapter
    __del__ = lambda self: None
FileProtocolAdapter_swigregister = _genicam.FileProtocolAdapter_swigregister
FileProtocolAdapter_swigregister(FileProtocolAdapter)


class FileAccess(object):
    def __init__(self, read_bufsize = 4096):
        if read_bufsize == 0:
            raise IOError("invalid read_bufsize")

        self.isopen   = False
        self.filename = ""
        self.mode     = ""
        self.fpa      = FileProtocolAdapter()
        self.fpa_bufsize  = 0
        self.fpos     = 0
        self.read_bufsize = read_bufsize

    def open(self, nodemap, filename, openmode):
        self.fpa.attach(nodemap)
        self.filename = filename
        self.fpa.openFile(filename,openmode)
        self.fpa_bufsize = self.fpa.getBufSize(filename, openmode)
        self.fpos = 0
        self.isopen = True

    def close(self):
        self.isopen = False
        self.fpa.closeFile(self.filename)

    def _read(self, size):
        assert(self.isopen)
        buf = ""
        for ofs in xrange(0, size, self.fpa_bufsize):
            read_len, data  = self.fpa.read(self.fpa_bufsize, self.fpos + ofs, self.filename)
            if read_len <= 0:
                break
            else:
                buf += data[:min(size-ofs,read_len)]

        self.fpos += len(buf)
        return buf

    def read(self, size = -1):
        assert(self.isopen)
        if size < 0:
            buf = ""
            while True:
                data  = self._read(self.read_bufsize)
                buf += data
                if len(data) < self.read_bufsize:
                    return buf

        else:
            data  = self._read(size)
            return data


    def write(self,data):
        assert(self.isopen)
        ret = self.fpa.write(data, self.fpos, self.filename)
        self.fpos += len(data)
        return ret

# This file is compatible with both classic and new-style classes.


